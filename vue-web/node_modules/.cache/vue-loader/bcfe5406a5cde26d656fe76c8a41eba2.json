{"remainingRequest":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\views\\sections\\Account.vue?vue&type=style&index=1&id=5642d546&lang=scss","dependencies":[{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\views\\sections\\Account.vue","mtime":1650964597000},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\css-loader\\dist\\cjs.js","mtime":1652258042074},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1652258044998},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\postcss-loader\\src\\index.js","mtime":1652258043094},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1652258078791},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652258014056},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1652258044998}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgLnVzZXItdGFiLW1lbnVzIHsKICAgIC5lbC10YWJzX19pdGVtIHsKICAgICAgY29sb3I6ICM5OTk7CiAgICAgIGhlaWdodDogMzVweDsKICAgICAgbGluZS1oZWlnaHQ6IDM1cHg7CiAgICAgICY6aG92ZXIsCiAgICAgICY6YWN0aXZlLAogICAgICAmOmZvY3VzIHsKICAgICAgICBjb2xvcjogIzMzMzsKICAgICAgfQogICAgICAmLmlzLWFjdGl2ZSB7CiAgICAgICAgY29sb3I6ICMzMzM7CiAgICAgIH0KICAgIH0KICAgIC5lbC10YWJzX19hY3RpdmUtYmFyIHsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMzsKICAgIH0KICB9CiAgLmVsLXRhYnNfX2FjdGl2ZS1iYXIgewogICAgaGVpZ2h0OiAwcHggIWltcG9ydGFudDsKICB9Cg=="},{"version":3,"sources":["C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\views\\sections\\Account.vue"],"names":[],"mappings":";EAkdE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACb,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACN,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACb;MACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACV,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACb;IACF;IACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxB;EACF;EACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxB","file":"C:/Users/Mohamed Tamim/Desktop/SONGTRADER-V2-FULL/fingernft_blindbox/fingernft_blindbox/vue-web/src/views/sections/Account.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"flex-row-box\">\n    <side :stat=\"stat\" :userinfo=\"userinfo\" @refreshStat=\"getUserStat\" />\n    <div class=\"flex-row-content\">\n      <div class=\"item-page\">\n        <div class=\"item-tab main-wrapper\">\n          <el-tabs class=\"user-tab-menus\" @tab-click=\"tabindexFunc\" v-model=\"tab\">\n            <el-tab-pane class=\"tab-content-info\" v-for=\"(tab, i) in tabs\" :key=\"i\" :label=\"tab.title\" :name=\"tab.name\">\n              <template #label>\n                <div class=\"tab-content-title\">\n                  <span>{{ tab.title }}</span>\n                  <span>({{ tab.count }})</span>\n                </div>\n              </template>\n              <div class=\"nft-list\" v-infinite-scroll=\"loadList\">\n                <div class=\"tab-content-none\" v-if=\"\n                    !userNftList[tab.name].length && loadStatus != 'loading'\n                  \">\n                  <div class=\"tab-info\">\n                    <div class=\"tab-title\">{{ $t(\"account.noFound\") }}</div>\n                    <div class=\"tab-intro\">{{ $t(\"account.noFoundText\") }}</div>\n                    <el-button class=\"tab-btn\" @click=\"goHome\">{{ $t(\"account.browseMarketplace\") }}\n                    </el-button>\n                  </div>\n                </div>\n                <template v-else>\n                  <div class=\"flex-box\">\n                    <nft-item v-for=\"(nft, i) in userNftList[tab.name]\" :nft=\"nft\" :index=\"i\" @showDialog=\"showDialog\" @onLike=\"onLike\" :key=\"i\" :address=\"address\">\n                    </nft-item>\n                    <nft-item-load :loadStatus=\"loadStatus\"></nft-item-load>\n                  </div>\n                </template>\n              </div>\n            </el-tab-pane>\n          </el-tabs>\n        </div>\n\n        <sale-dialog :show=\"showSaleDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :asset=\"dialogOrder\" :nft=\"dialogNft\" :uri=\"dialogNftURI\">\n        </sale-dialog>\n        <cancel-sale-dialog :show=\"showCancelSaleDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :asset=\"dialogOrder\" :nft=\"dialogNft\" :uri=\"dialogNftURI\">\n        </cancel-sale-dialog>\n        <buy-dialog :show=\"showBuyDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :asset=\"dialogOrder\" :nft=\"dialogNft\" :uri=\"dialogNftURI\">\n        </buy-dialog>\n\n        <bid-dialog :show=\"showBidDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :bid=\"dialogOrder\" :nft=\"dialogNft\" :myAsset=\"dialogMyAsset\" :uri=\"dialogNftURI\">\n        </bid-dialog>\n        <cancel-bid-dialog :show=\"showCancelBidDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :bid=\"dialogOrder\" :nft=\"dialogNft\" :uri=\"dialogNftURI\">\n        </cancel-bid-dialog>\n        <accept-dialog :show=\"showAcceptDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :bid=\"dialogOrder\" :nft=\"dialogNft\" :myAsset=\"dialogMyAsset\" :uri=\"dialogNftURI\">\n        </accept-dialog>\n        <transfer-dialog :show=\"showTransferDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :asset=\"dialogOrder\" :nft=\"dialogNft\" :uri=\"dialogNftURI\">\n        </transfer-dialog>\n        <burn-dialog :show=\"showBurnDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :asset=\"dialogOrder\" :nft=\"dialogNft\">\n        </burn-dialog>\n\n        <auction-detail-dialog :show=\"showAuctionDetailDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :token=\"dialogToken\" :auction=\"dialogOrder\" :nft=\"dialogNft\" :uri=\"dialogNftURI\">\n        </auction-detail-dialog>\n        <sale-type-dialog :show=\"showSaleTypeDialog\" @close=\"closeDialog\" @saleType=\"dialogSelect\"></sale-type-dialog>\n        <auction-dialog :show=\"showAuctionDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :auction=\"dialogOrder\" :myAsset=\"dialogMyAsset\" :nft=\"dialogNft\" :uri=\"dialogNftURI\"></auction-dialog>\n        <auction-cancel-dialog :show=\"showAuctionCancelDialog\" @close=\"closeDialog\" @confirm=\"dialogConfirm\" :auction=\"dialogOrder\" :nft=\"dialogNft\" :uri=\"dialogNftURI\"></auction-cancel-dialog>\n\n      </div>\n    </div>\n  </div>\n</template>\n<script>\n  import NftDialog from \"@/mixins/NftDialog\";\n  import NftItem from \"@/mixins/NftItem\";\n  import Side from \"./components/Side\";\n\n  export default {\n    name: \"Items\",\n    mixins: [NftDialog, NftItem],\n    components: {\n      Side,\n    },\n    data () {\n      return {\n        imgUrl: \"\",\n        address: \"\",\n        isFollow: false,\n        tab: \"collectibles\",\n        tabs: [\n          { name: \"sale\", title: this.$t(\"items.sale\"), count: 0 },\n          { name: \"collectibles\", title: this.$t(\"items.collectibles\"), count: 0 },\n          { name: \"created\", title: this.$t(\"items.created\"), count: 0 },\n          { name: \"liked\", title: this.$t(\"items.liked\"), count: 0 },\n        ],\n        page: 1,\n        limit: this.$store.state.pageLimit,\n        userinfo: {},\n        userNftList: {\n          sale: [],\n          collectibles: [],\n          created: [],\n          liked: [],\n        },\n        stat: {},\n        showFollowing: false,\n        showFollow: false,\n        loadStatus: \"\",\n      };\n    },\n    created () {\n      this.init();\n    },\n    computed: {\n      connected () {\n        return this.$store.state.connected;\n      },\n      user () {\n        return this.$store.state.user;\n      },\n    },\n    watch: {\n      tab (val, old) {\n        if (val == old) return;\n        this.page = 1;\n        this.$router.push({\n          path: \"/account/\" + this.address,\n          query: { tab: this.tab },\n        });\n        this.loadStatus = \"\";\n        this.getList();\n      },\n      $route (newRoute, oldRoute) {\n        if (newRoute.path == oldRoute.path) return;\n        let address = this.$route.params.address;\n        if (!address) return;\n        this.init();\n      },\n    },\n    methods: {\n      init () {\n        this.page = 1;\n        this.userNftList = { sale: [], collectibles: [], created: [], liked: [] };\n        this.stat = {};\n        this.isFollow = false;\n        this.address = this.$route.params.address;\n        if (this.$route.query.tab) {\n          this.tab = this.$route.query.tab;\n        } else {\n          this.tab = \"collectibles\";\n        }\n        this.getUserinfo();\n        if (this.connected) {\n          this.matchFollow();\n        }\n        this.getUserStat();\n        this.getList();\n      },\n      onSuccessCopy () {\n        this.$tools.message(this.$t(\"request.copySuccess\"), \"success\");\n      },\n      onErrorCopy () {\n        this.$tools.message(\"Copy error\");\n      },\n      goProfile () {\n        if (!this.$tools.needLogin()) return;\n        this.$router.push(\"/profile\");\n      },\n      goHome () {\n        this.$router.push(\"/\");\n      },\n      loadList () {\n        if (this.loadStatus == \"over\") return;\n        this.getList();\n      },\n      reloadList () {\n        this.page = 1;\n        this.getList();\n      },\n      closeFollowPopup () {\n        this.showFollow = false;\n        this.showFollowing = false;\n      },\n      onShare (type) { },\n      getUserStat () {\n        let params = {\n          address: this.address,\n        };\n        this.$api(\"user.stat\", params).then((res) => {\n          if (this.$tools.checkResponse(res)) {\n            this.stat = Object.assign({},\n              {\n                followCount: !res.data.followCount ? 0 : res.data.followCount,\n                followerCount: !res.data.followerCount ? 0 : res.data.followerCount,\n              }\n            );\n            this.tabs[0].count = !res.data.saleCount ? 0 : res.data.saleCount;\n            this.tabs[1].count = !res.data.collectionCount ? 0 : res.data.collectionCount;\n            this.tabs[2].count = !res.data.createCount ? 0 : res.data.createCount;\n            this.tabs[3].count = !res.data.likeCount ? 0 : res.data.likeCount;\n            this.tabs = [].concat(this.tabs);\n          }\n        });\n        this.matchFollow();\n      },\n      getOnSale: function () {\n        let params = {\n          page: this.page,\n          limit: this.limit,\n          address: this.address,\n        };\n        if (this.loadStatus == \"loading\") return;\n        this.loadStatus = \"loading\";\n        var that = this;\n        this.$api(\"user.onsales\", params).then((res) => {\n          this.loadStatus = \"loaded\";\n          if (that.$tools.checkResponse(res)) {\n            if (params.page == 1) this.userNftList.sale = [];\n            that.userNftList.sale = that.userNftList.sale.concat(res.data.list);\n            that._queryFunction(res.data.list, that.userNftList.sale);\n            that.page = params.page + 1;\n            that.loadStatus =\n              res.data.list.length < res.data.limit ? \"over\" : this.loadStatus;\n          } else {\n            that.$tools.message(res.errmsg);\n          }\n        });\n      },\n      getCollectiable: function () {\n        let params = {\n          page: this.page,\n          limit: this.limit,\n          address: this.address,\n        };\n        if (this.loadStatus == \"loading\") return;\n        this.loadStatus = \"loading\";\n        var that = this;\n        this.$api(\"user.collections\", params).then((res) => {\n          this.loadStatus = \"loaded\";\n          if (that.$tools.checkResponse(res)) {\n            if (params.page == 1) this.userNftList.collectibles = [];\n            that.userNftList.collectibles = that.userNftList.collectibles.concat(\n              res.data.list\n            );\n            that._queryFunction(res.data.list, that.userNftList.collectibles);\n            that.page = params.page + 1;\n            that.loadStatus =\n              res.data.list.length < res.data.limit\n                ? \"over\"\n                : this.loadStatus;\n          } else {\n            that.$tools.message(res.errmsg);\n          }\n        });\n      },\n      getCreated: function () {\n        let params = {\n          address: this.address,\n          page: this.page,\n          limit: this.limit,\n        };\n        if (this.loadStatus == \"loading\") return;\n        this.loadStatus = \"loading\";\n        var that = this;\n        this.$api(\"user.created\", params).then((res) => {\n          this.loadStatus = \"loaded\";\n          if (that.$tools.checkResponse(res)) {\n            if (params.page == 1) this.userNftList.created = [];\n            that.userNftList.created = that.userNftList.created.concat(res.data.list);\n            that._queryFunction(res.data.list, that.userNftList.created);\n            that.page = params.page + 1;\n            that.loadStatus =\n              res.data.list.length < res.data.limit\n                ? \"over\"\n                : this.loadStatus;\n          } else {\n            that.$tools.message(res.errmsg);\n          }\n        });\n      },\n      getLiked: function () {\n        let params = {\n          page: this.page,\n          limit: this.limit,\n          address: this.address,\n        };\n        if (this.loadStatus == \"loading\") return;\n        this.loadStatus = \"loading\";\n        var that = this;\n        this.$api(\"user.like\", params).then((res) => {\n          this.loadStatus = \"loaded\";\n          if (that.$tools.checkResponse(res)) {\n            if (params.page == 1) this.userNftList.liked = [];\n            that.userNftList.liked = that.userNftList.liked.concat(res.data.list);\n            that._queryFunction(res.data.list, that.userNftList.liked);\n            that.page = params.page + 1;\n            that.loadStatus =\n              res.data.list.length < res.data.limit\n                ? \"over\"\n                : this.loadStatus;\n          } else {\n            that.$tools.message(res.errmsg);\n          }\n        });\n      },\n      getList () {\n        switch (this.tab) {\n          case \"sale\":\n            this.getOnSale();\n            break;\n          case \"collectibles\":\n            this.getCollectiable();\n            break;\n          case \"created\":\n            this.getCreated();\n            break;\n          case \"liked\":\n            this.getLiked();\n            break;\n        }\n      },\n      onLike(data, like){\n        this._onLike(data, like, this.userNftList[this.tab]);\n      },\n      tabindexFunc: function () {\n        return;\n      },\n      getUserinfo () {\n        let params = {\n          address: this.address,\n        };\n        this.$api(\"user.info\", params).then((res) => {\n          if (this.$tools.checkResponse(res)) {\n            let _data = Object.assign({}, res.data, {\n              address: this.address,\n            });\n            this.userinfo = _data;\n            this.userinfo.coinbase = _data.address;\n            this.imgUrl = _data.bannerUrl;\n          } else {\n            this.$tools.message(res.errmsg);\n          }\n        });\n      },\n      addFollow () {\n        let data = {\n          address: this.address,\n        };\n        var that = this;\n        this.$api(\"follow.add\", data).then((res) => {\n          if (that.$tools.checkResponse(res)) {\n            that.isFollow = true;\n            this.getUserStat();\n          }\n        });\n      },\n      deleteFollow () {\n        let data = {\n          address: this.address,\n        };\n        var that = this;\n        this.$api(\"follow.delete\", data).then((res) => {\n          if (that.$tools.checkResponse(res)) {\n            that.isFollow = false;\n            this.getUserStat();\n          }\n        });\n      },\n      matchFollow () {\n        let address = {\n          address: this.user.coinbase,\n          userAddrs: this.address,\n        };\n        var that = this;\n        this.$api(\"follow.match\", address).then((res) => {\n          if (that.$tools.checkResponse(res)) {\n            if (!res.data.length) {\n              that.userinfo.isFollow = false;\n              that.isFollow = false;\n            } else {\n              that.userinfo.isFollow = true;\n              that.isFollow = true;\n            }\n          }\n        });\n      },\n    },\n  };\n</script>\n<style lang=\"scss\" scoped>\n  .item-page {\n    display: flex;\n    flex-direction: column;\n    margin: 3% auto;\n    width: 100%;\n  }\n  .item-tab {\n    position: relative;\n    .tab-content-info {\n      min-height: 200px;\n      .tab-content-none {\n        width: 100%;\n        display: flex;\n        justify-content: center;\n        text-align: center;\n        margin: 43px auto;\n      }\n      .tab-info {\n        .tab-title {\n          font-size: 24px;\n          font-weight: bold;\n          color: #1d1e22;\n          margin: 45px auto 23px;\n        }\n        .tab-intro {\n          width: 313px;\n          font-size: 16px;\n          font-weight: 400;\n          color: #1d1e22;\n          line-height: 22px;\n          opacity: 0.5;\n        }\n        .tab-btn {\n          width: 250px;\n          height: 54px;\n          margin-top: 21px;\n        }\n      }\n      .nft-list {\n        margin: 0 -10px;\n        padding: 8px 0;\n        .nft {\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: flex-start;\n          width: 100%;\n        }\n        .loading-status {\n          padding-bottom: 50px;\n          width: 100%;\n        }\n        .nft-loading {\n          height: 60px;\n        }\n        .nft-loading-over {\n          text-align: center;\n          padding: 30px 0;\n          color: $grayColor;\n        }\n      }\n    }\n  }\n\n  .tab-content-title {\n    min-width: $tabTitleWidth;\n    text-align: center;\n  }\n\n  @media screen and (max-width: $media_l3) {\n    .item-page {\n      &.main-wrapper {\n        padding-top: 0;\n        padding-bottom: 0;\n      }\n    }\n\n    .item-tab {\n      margin: 0;\n    }\n  }\n</style>\n\n<style lang=\"scss\">\n  .user-tab-menus {\n    .el-tabs__item {\n      color: #999;\n      height: 35px;\n      line-height: 35px;\n      &:hover,\n      &:active,\n      &:focus {\n        color: #333;\n      }\n      &.is-active {\n        color: #333;\n      }\n    }\n    .el-tabs__active-bar {\n      background-color: #333;\n    }\n  }\n  .el-tabs__active-bar {\n    height: 0px !important;\n  }\n</style>\n"]}]}