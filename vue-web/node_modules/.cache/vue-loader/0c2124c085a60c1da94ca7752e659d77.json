{"remainingRequest":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\components\\components\\Jazzicon.vue?vue&type=template&id=26c5df6e","dependencies":[{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\components\\components\\Jazzicon.vue","mtime":1650964597000},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652258014056},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1652258014277},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1652258044998},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652258014056},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1652258044998}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiByZWY9ImphenppY29uIiAvPgo="},{"version":3,"sources":["C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\components\\components\\Jazzicon.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC","file":"C:/Users/Mohamed Tamim/Desktop/SONGTRADER-V2-FULL/fingernft_blindbox/fingernft_blindbox/vue-web/src/components/components/Jazzicon.vue","sourceRoot":"","sourcesContent":["<template>\n  <div ref=\"jazzicon\" />\n</template>\n<script>\nimport MersenneTwister from \"mersenne-twister\";\nimport Color from \"color\";\nimport addressToNumber from \"./addressToNumber\";\nexport default {\n  name: \"Jazzicon\",\n  props: {\n    shape: {\n      type: String,\n      default: \"\",\n    },\n    seed: {\n      type: Number,\n      default: Math.round(Math.random() * 10000000),\n    },\n    diameter: {\n      type: Number,\n      default: 100,\n    },\n    address: {\n      type: String,\n      default: null,\n    },\n    shapeCount: {\n      type: Number,\n      default: 4,\n    },\n    colors: {\n      type: Array,\n      default: () => [\n        \"#01888C\", // teal\n        \"#FC7500\", // bright orange\n        \"#034F5D\", // dark teal\n        \"#F73F01\", // orangered\n        \"#FC1960\", // magenta\n        \"#C7144C\", // raspberry\n        \"#F3C100\", // goldenrod\n        \"#1598F2\", // lightning blue\n        \"#2465E1\", // sail blue\n        \"#F19E02\", // gold\n      ],\n    },\n  },\n  data() {\n    return {\n      generator: null,\n      svgns: \"http://www.w3.org/2000/svg\",\n    };\n  },\n  watch: {\n    seed: {\n      handler() {\n        this.icon();\n      },\n    },\n    address: {\n      handler() {\n        this.icon();\n      },\n    },\n    diameter: {\n      handler() {\n        this.icon();\n      },\n    },\n    shape: {\n      handler() {\n        this.icon();\n      },\n    },\n  },\n  mounted() {\n    this.icon();\n  },\n  methods: {\n    async icon() {\n      const seed = this.address ? addressToNumber(this.address) : this.seed;\n      this.$refs.jazzicon.innerHTML = \"\";\n      const el = await this.generateIdenticon(this.diameter, seed);\n      await this.$refs.jazzicon.append(el);\n    },\n    newPaper(diameter, color) {\n      const container = document.createElement(\"div\");\n      if (this.shape == \"circular\") {\n        container.style.borderRadius = `${diameter / 2}px`;\n      }else{\n        container.style.borderRadius = '10px';\n      }\n\n      container.style.overflow = \"hidden\";\n      container.style.padding = \"0px\";\n      container.style.margin = \"0px\";\n      container.style.width = \"\" + diameter + \"px\";\n      container.style.height = \"\" + diameter + \"px\";\n      container.style.display = \"inline-block\";\n      container.style.background = color;\n      return {\n        container: container,\n      };\n    },\n    generateIdenticon(diameter, seed) {\n      this.generator = new MersenneTwister(seed);\n      const remainingColors = this.hueShift(\n        this.colors.slice(),\n        this.generator\n      );\n      const elements = this.newPaper(diameter, this.genColor(remainingColors));\n      const container = elements.container;\n      const svg = document.createElementNS(this.svgns, \"svg\");\n      svg.setAttributeNS(null, \"x\", \"0\");\n      svg.setAttributeNS(null, \"y\", \"0\");\n      svg.setAttributeNS(null, \"width\", diameter);\n      svg.setAttributeNS(null, \"height\", diameter);\n      container.appendChild(svg);\n      for (let i = 0; i < this.shapeCount - 1; i++) {\n        this.genShape(remainingColors, diameter, i, this.shapeCount - 1, svg);\n      }\n      return container;\n    },\n    genShape(remainingColors, diameter, i, total, svg) {\n      const center = diameter / 2;\n      const shape = document.createElementNS(this.svgns, \"rect\");\n      shape.setAttributeNS(null, \"x\", \"0\");\n      shape.setAttributeNS(null, \"y\", \"0\");\n      shape.setAttributeNS(null, \"width\", diameter);\n      shape.setAttributeNS(null, \"height\", diameter);\n      const firstRot = this.generator.random();\n      const angle = Math.PI * 2 * firstRot;\n      const velocity =\n        (diameter / total) * this.generator.random() + (i * diameter) / total;\n      const tx = Math.cos(angle) * velocity;\n      const ty = Math.sin(angle) * velocity;\n      const translate = \"translate(\" + tx + \" \" + ty + \")\";\n      // Third random is a shape rotation on top of all of that.\n      const secondRot = this.generator.random();\n      const rot = firstRot * 360 + secondRot * 180;\n      const rotate =\n        \"rotate(\" + rot.toFixed(1) + \" \" + center + \" \" + center + \")\";\n      const transform = translate + \" \" + rotate;\n      shape.setAttributeNS(null, \"transform\", transform);\n      const fill = this.genColor(remainingColors);\n      shape.setAttributeNS(null, \"fill\", fill);\n      svg.appendChild(shape);\n    },\n    genColor(colors) {\n      /* eslint-disable */\n      const rand = this.generator.random();\n      const idx = Math.floor(colors.length * this.generator.random());\n      const color = colors.splice(idx, 1)[0];\n      return color;\n    },\n    hueShift(colors, generator) {\n      const wobble = 30;\n      const amount = generator.random() * 30 - wobble / 2;\n      return colors.map(function (hex) {\n        const color = Color(hex);\n        color.rotate(amount);\n        return color.hex();\n      });\n    },\n  },\n};\n</script>\n"]}]}