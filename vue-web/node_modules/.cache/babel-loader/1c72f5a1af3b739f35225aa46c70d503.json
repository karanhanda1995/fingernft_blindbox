{"remainingRequest":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\views\\sections\\NFTDetail.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\views\\sections\\NFTDetail.vue","mtime":1650964597000},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\babel.config.js","mtime":1650964597000},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652258014056},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1652258014277},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652258014056},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1652258044998}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}