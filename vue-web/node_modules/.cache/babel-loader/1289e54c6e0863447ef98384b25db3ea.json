{"remainingRequest":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\components\\dialogs\\Mint.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\components\\dialogs\\Mint.vue","mtime":1650964597000},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\babel.config.js","mtime":1650964597000},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652258014056},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1652258014277},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652258014056},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1652258044998}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["BigNumber","data","visible","show","step","approve","mint","sale","fileUp","error","all","asset","storeAsset","emits","props","type","Boolean","default","nft","Object","file","String","animFile","watch","val","computed","user","$store","state","config","methods","form","onSale","result","uploadStorage","storageId","id","url","files","multiUploadStorage","animResult","fileResult","animStorageId","animUrl","start","contract","onApprove","setApproveAll","approved","onMint","mintToken","assign","confirm","price","sellerFee","saleToken","$emit","close","closed","$sdk","isApprovedForAll","coinbase","transferProxyAddress","isApproved","setApprovalForAll","Promise","resolve","reject","formData","FormData","append","that","$api","then","res","$tools","checkResponse","errmsg","i","length","address","signature","v","toLocaleLowerCase","r","s","tokenId","fees","royalties","push","recipient","value","properties","JSON","stringify","quantity","_data","imgUrl","description","categoryId","category","name","tokenURI","metadataUrl","replace","mintErc1155Token","message","paytoken","payToken","sellType","valueAssetType","buyValue","multipliedBy","exponentiatedBy","decimals","toFixed","owner","sellToken","sellTokenId","sellValue","buyToken","buyTokenId","buyType","salt","valueCommonType","startsWith","slice","$web3","sign","$t"],"sourceRoot":"","sources":["C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\components\\dialogs\\Mint.vue"],"sourcesContent":["<template>\n  <el-dialog :model-value=\"visible\" :show-close=\"false\" :close-on-click-modal=\"false\" :modal=\"false\" @close=\"$emit('close')\" @closed=\"closed\" custom-class=\"fg-dialog\" destroy-on-close>\n    <template #title>\n      <div class=\"fg-dialog-title\">\n        <div class=\"left\">\n          <span>{{$t('dialog.followSteps')}}</span>\n        </div>\n        <div class=\"right\" @click=\"$emit('close')\">\n          <img class=\"close-img\" src=\"@/assets/create-img/pop_shut.png \">\n        </div>\n      </div>\n    </template>\n    <div class=\"fg-dialog-body\">\n      <div class=\"all-error\" v-if=\"error.all\"> {{ error.all }} </div>\n      <div class=\"process\" v-if=\"nft.form && nft.form.onSale\">\n        <div class=\"step-info\">\n          <div class=\"text\">\n            <span>{{$t('dialog.approveCollection')}}</span>\n          </div>\n          <span v-if=\"step.approve != 1\" :class=\"step.approve== 2 ? 'finish': ''\" class=\"step iconfont icon-seleted\"></span>\n          <div class=\"step loading\" v-else>\n            <img class=\"loading-animation\" src=\"@/assets/img/loading.png\" />\n          </div>\n        </div>\n        <div class=\"process-btn\">\n          <el-button @click=\"onApprove\" type=\"primary\" v-if=\"step.approve == 0\">\n            {{$t('dialog.approve')}}</el-button>\n          <el-button disabled type=\"info\" v-else-if=\"step.approve == 1\">\n            {{$t('dialog.inProgress')}}</el-button>\n          <el-button disabled type=\"info\" v-else>{{$t('dialog.done')}}</el-button>\n        </div>\n        <div class=\"process-error\" v-if=\"error.approve\">{{ error.approve }}</div>\n      </div>\n      <div class=\"process\">\n        <div class=\"step-info\">\n          <div class=\"text\">\n            <span>{{$t('dialog.fileUpload')}}</span>\n          </div>\n          <span v-if=\"step.fileUp != 1\" :class=\"step.fileUp== 2 ? 'finish': ''\" class=\"step iconfont icon-seleted\"></span>\n          <div class=\"step loading\" v-else>\n            <img class=\"loading-animation\" src=\"@/assets/img/loading.png\" />\n          </div>\n        </div>\n        <div class=\"process-btn\">\n          <el-button disabled type=\"info\" v-if=\"this.nft.form.onSale && step.approve != 2\">{{$t('dialog.upload')}}\n          </el-button>\n          <el-button @click=\"fileUp\" type=\"primary\" v-else-if=\"step.fileUp ==0\">{{$t('dialog.upload')}}\n          </el-button>\n          <el-button disabled type=\"info\" v-else-if=\"step.fileUp == 1\">{{$t('dialog.inProgress')}}\n          </el-button>\n          <el-button disabled type=\"info\" v-else>{{$t('dialog.done')}}</el-button>\n        </div>\n        <div class=\"process-error\" v-if=\"error.fileUp\">{{ error.fileUp }}</div>\n      </div>\n      <div class=\"process\">\n        <div class=\"step-info\">\n          <div class=\"text\">\n            <span>{{$t('dialog.cyn')}}</span>\n          </div>\n          <span v-if=\"step.mint != 1\" :class=\"step.mint== 2 ? 'finish': ''\" class=\"step iconfont icon-seleted\"></span>\n          <div class=\"step loading\" v-else>\n            <img class=\"loading-animation\" src=\"@/assets/img/loading.png\" />\n          </div>\n        </div>\n        <div class=\"process-btn\">\n          <el-button disabled type=\"info\" v-if=\"step.fileUp != 2\">{{$t('dialog.mint')}}\n          </el-button>\n          <el-button @click=\"onMint\" type=\"primary\" v-else-if=\"step.mint ==0\">{{$t('dialog.mint')}}\n          </el-button>\n          <el-button disabled type=\"info\" v-else-if=\"step.mint == 1\">{{$t('dialog.inProgress')}}\n          </el-button>\n          <el-button disabled type=\"info\" v-else>{{$t('dialog.done')}}</el-button>\n        </div>\n        <div class=\"process-error\" v-if=\"error.mint\">{{ error.mint }}</div>\n      </div>\n      <div class=\"process\" v-if=\"nft.form.onSale\">\n        <div class=\"step-info\">\n          <div class=\"text\">\n            <span>{{$t('dialog.signsSale')}}</span>\n          </div>\n          <span v-if=\"step.sale != 1\" :class=\"step.sale == 2 ? 'finish': ''\" class=\"step iconfont icon-seleted\"></span>\n          <div class=\"step loading\" v-else>\n            <img class=\"loading-animation\" src=\"@/assets/img/loading.png\" />\n          </div>\n        </div>\n        <div class=\"process-btn\">\n          <el-button disabled type=\"info\" v-if=\"step.mint != 2\">{{$t('dialog.sale')}}</el-button>\n          <el-button @click=\"onSale\" type=\"primary\" v-else-if=\"step.sale ==0\">{{$t('dialog.sale')}}\n          </el-button>\n          <el-button disabled type=\"info\" v-else-if=\"step.sale == 1\">{{$t('dialog.inProgress')}}\n          </el-button>\n          <el-button disabled type=\"info\" v-else>{{$t('dialog.done')}}</el-button>\n        </div>\n        <div class=\"process-error\" v-if=\"error.sale\">{{ error.sale }}</div>\n      </div>\n    </div>\n  </el-dialog>\n</template>\n<script>\n  import BigNumber from 'bignumber.js'\n\n  export default {\n    data: function () {\n      return {\n        visible: this.show,\n        step: {\n          approve: 0,\n          mint: 0,\n          sale: 0,\n          fileUp: 0,\n        },\n        error: {\n          all: \"\",\n          approve: \"\",\n          mint: \"\",\n          sale: \"\",\n          fileUp: \"\",\n        },\n        asset: {},\n        storeAsset: {},\n      };\n    },\n    emits: ['confirm', 'close'],\n    props: {\n      show: {\n        type: Boolean,\n        default: false,\n      },\n      nft: {\n        type: Object,\n        default: {},\n      },\n      file: {\n        type: String,\n        default: \"\",\n      },\n      animFile: {\n        type: String,\n        default: ''\n      }\n    },\n    watch: {\n      show (val) {\n        this.visible = this.show;\n      },\n    },\n    computed: {\n      user () {\n        return this.$store.state.user;\n      },\n      config () {\n        return this.$store.state.config;\n      },\n    },\n    methods: {\n      async fileUp () {\n        if (this.nft.form.onSale && this.step.approve != 2) return;\n        this.step.fileUp = 1;\n        let asset = this.asset;\n        let result = null\n        if (!this.animFile) {\n          result = await this.uploadStorage(this.file);\n          if (result.error) {\n            this.error.fileUp = result.error;\n            this.step.mint = 0;\n            this.step.fileUp = 0;\n            return;\n          }\n          this.step.fileUp = 2;\n          asset.storageId = result.id;\n          asset.url = result.url;\n          this.storeAsset = asset;\n        } else {\n          let files = [this.animFile, this.file];\n          result = await this.multiUploadStorage(files);\n          if (result.error) {\n            this.error.fileUp = result.error;\n            this.step.mint = 0;\n            this.step.fileUp = 0;\n            return;\n          }\n          this.error.fileUp = \"\";\n          this.step.fileUp = 2;\n\n          let animResult = result[0];\n          let fileResult = result[1];\n\n          asset.animStorageId = animResult.id;\n          asset.animUrl = animResult.url;\n          asset.storageId = fileResult.id;\n          asset.url = fileResult.url;\n          this.storeAsset = asset;\n        }\n      },\n      async start () {\n        this.asset = this.nft.contract;\n        if (this.nft.form.onSale) {\n          await this.onApprove();\n        } else {\n          await this.fileUp();\n        }\n      },\n      async onApprove () {\n        if (!this.nft.form.onSale) return;\n        this.step.approve = 1;\n        let asset = this.asset;\n        let approved = await this.setApproveAll(asset);\n        if (approved.error) {\n          this.error.approve = approved.error;\n          this.step.approve = 0;\n          return;\n        }\n        this.asset = asset;\n        this.error.approve = \"\";\n        this.step.approve = 2;\n      },\n      async onMint () {\n        let asset = this.storeAsset;\n        this.step.mint = 1;\n        let result = await this.mintToken(asset);\n        if (result.error) {\n          this.error.mint = result.error;\n          this.step.mint = 0;\n          return;\n        }\n        this.asset = Object.assign(this.asset);\n        this.error.mint = \"\";\n        this.step.mint = 2;\n        if (!this.nft.form.onSale) {\n          this.confirm({});\n        }\n      },\n      async onSale () {\n        if (!this.nft.form.onSale) return;\n        this.step.sale = 1;\n        let asset = {\n          ...this.asset,\n          price: this.nft.form.price,\n          sellerFee: this.config.sellerFee,\n        };\n        let result = await this.saleToken(asset);\n        if (result.error) {\n          this.error.sale = result.error;\n          this.step.sale = 0;\n          return;\n        }\n        this.step.sale = 2;\n        this.confirm({});\n      },\n      confirm (data) {\n        this.$emit(\"confirm\", data);\n      },\n      close () {\n        this.$emit(\"close\");\n      },\n      closed () {\n        this.step = {\n          approve: 0,\n          mint: 0,\n          sale: 0,\n          fileUp: 0,\n        };\n        this.error = {\n          all: \"\",\n          approve: \"\",\n          mint: \"\",\n          sale: \"\",\n          fileUp: \"\",\n        };\n      },\n      async setApproveAll (asset) {\n        let isApproved = await this.$sdk.isApprovedForAll(\n          asset,\n          this.user.coinbase,\n          this.config.contract.transferProxyAddress,\n        );\n        if (typeof isApproved == \"object\" && isApproved.error) {\n          return isApproved;\n        }\n        if (isApproved) return true;\n        let result = await this.$sdk.setApprovalForAll(\n          asset,\n          this.user.coinbase,\n          this.config.contract.transferProxyAddress,\n          true\n        );\n        return result;\n      },\n      async uploadStorage (file) {\n        return new Promise((resolve, reject) => {\n          const formData = new FormData();\n          formData.append(\"file\", file)\n          var that = this;\n          this.$api(\"storage.upload\", formData).then(async function (res) {\n            if (that.$tools.checkResponse(res)) {\n              resolve(res.data);\n            } else {\n              resolve({\n                error: res.errmsg,\n              });\n            }\n          });\n        });\n      },\n      async multiUploadStorage (files) {\n        return new Promise((resolve, reject) => {\n          const formData = new FormData();\n          for (var i = 0;i < files.length;i++) {\n            formData.append(\"files\", files[i]);\n          }\n          var that = this;\n          this.$api(\"storage.multiupload\", formData).then(async function (res) {\n            if (that.$tools.checkResponse(res)) {\n              resolve(res.data);\n            } else {\n              resolve({\n                error: res.errmsg,\n              });\n            }\n          });\n        });\n      },\n      async mintToken (asset) {\n        return new Promise((resolve, reject) => {\n          let data = { address: asset.address };\n          var that = this;\n          this.$api(\"dapp.sign\", data).then(async function (res) {\n            if (that.$tools.checkResponse(res)) {\n              let signature = res.data;\n              asset.signature = {\n                v: signature.v.toLocaleLowerCase(),\n                r: signature.r.toLocaleLowerCase(),\n                s: signature.s.toLocaleLowerCase(),\n              };\n              asset.tokenId = signature.tokenId;\n              asset.fees = [];\n              if (that.nft.form.royalties) {\n                asset.fees.push({\n                  recipient: that.user.coinbase,\n                  value: that.nft.form.royalties,\n                  tokenId: asset.tokenId,\n                })\n              }\n              that.asset = asset;\n              var properties = \"\";\n              if (that.nft.form.properties.length) {\n                properties = JSON.stringify(that.nft.form.properties);\n              }\n              let quantity;\n              if (asset.type == 3) {\n                quantity = 1\n              } else if (asset.type == 2) {\n                quantity = that.nft.form.quantity\n              }\n              var _data = {\n                address: asset.address,\n                storageId: asset.storageId,\n                imgUrl: asset.url,\n                quantity: quantity,\n                tokenId: asset.tokenId,\n                description: that.nft.form.description,\n                royalties: JSON.stringify([that.nft.form.royalties]),\n                categoryId: that.nft.form.category,\n                properties: properties,\n                type: asset.type,\n                name: that.nft.form.name,\n                animUrl: asset.animUrl,\n                animStorageId: asset.animStorageId\n              };\n              that.$api(\"nft.add\", _data).then(async function (res) {\n                if (that.$tools.checkResponse(res)) {\n                  asset.tokenURI = res.data.metadataUrl;\n                  asset.tokenURI = asset.tokenURI.replace('ipfs:/', '')\n\n                  let result;\n                  if (asset.type == 3) {\n                    result = await that.$sdk.mintToken(\n                      that.user.coinbase,\n                      asset\n                    );\n\n                  } else if (asset.type == 2) {\n                    asset.quantity = that.nft.form.quantity;\n                    result = await that.$sdk.mintErc1155Token(\n                      that.user.coinbase,\n                      asset\n                    );\n                  }\n                  resolve(result);\n                } else {\n                  resolve({ error: res.errmsg });\n                }\n              });\n            } else {\n              that.$tools.message(res.errmsg);\n              resolve({ error: res.errmsg });\n            }\n          });\n        });\n      },\n      async saleToken (asset) {\n        return new Promise((resolve, reject) => {\n          var paytoken = this.nft.payToken;\n          let quantity;\n          let sellType;\n          if (asset.type == 3) {\n            quantity = 1\n            sellType = this.$sdk.valueAssetType(\"ERC721\")\n          } else if (asset.type == 2) {\n            quantity = this.nft.form.quantity\n            sellType = this.$sdk.valueAssetType(\"ERC1155\")\n          }\n\n          let buyValue = new BigNumber(this.nft.form.price);\n          buyValue = buyValue.multipliedBy(new BigNumber(quantity)).multipliedBy(\n            new BigNumber(10).exponentiatedBy(paytoken.decimals)).toFixed();\n \n          var data = {\n            owner: this.user.coinbase,\n            sellToken: asset.address,\n            sellTokenId: asset.tokenId,\n            sellValue: quantity,\n            sellType: sellType,\n            buyToken: paytoken.address,\n            buyTokenId: \"0\",\n            buyValue: buyValue,\n            buyType: paytoken.type,\n            salt: \"0\",\n            type: this.$sdk.valueCommonType(\"SALE\")\n          };\n          let that = this;\n          this.$api(\"order.prepare\", data).then(async function (res) {\n            if (that.$tools.checkResponse(res)) {\n              let message = res.data.message;\n              if (message.startsWith(\"0x\")) {\n                message = message.slice(2, message.length);\n              }\n              let salt = res.data.salt;\n              let signature = \"\";\n              try {\n                signature = await that.$web3.sign(message, that.user.coinbase);\n                if (signature.error) {\n                  return resolve(signature);\n                }\n              } catch (e) {\n                return resolve({ error: e.message });\n              }\n              var _data = {\n                type: that.$sdk.valueCommonType(\"SALE\"),\n                owner: data.owner,\n                sellToken: data.sellToken,\n                sellTokenId: data.sellTokenId,\n                sellValue: data.sellValue,\n                sellType: data.sellType,\n                buyToken: data.buyToken,\n                buyTokenId: data.tokenId ? data.tokenId : 0,\n                buyValue: data.buyValue,\n                buyType: data.buyType,\n                salt: salt,\n                message: message,\n                signature: signature,\n              };\n              that.$api(\"order.add\", _data).then(function (res) {\n                if (that.$tools.checkResponse(res)) {\n                  that.$tools.message(that.$t('request.mintSuccess'), \"success\");\n                  resolve(true);\n                } else {\n                  that.$tools.message(res.errmsg);\n                  resolve({ error: res.errmsg });\n                }\n              });\n            } else {\n              that.$tools.message(res.errmsg);\n              resolve({ error: res.errmsg });\n            }\n          });\n        });\n      },\n    },\n  };\n</script>\n<style lang=\"scss\" scoped>\n</style>\n\n"]}]}