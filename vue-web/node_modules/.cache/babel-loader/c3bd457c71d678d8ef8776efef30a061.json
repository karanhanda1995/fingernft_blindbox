{"remainingRequest":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\util\\sdk\\index.js","dependencies":[{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\src\\util\\sdk\\index.js","mtime":1650964597000},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\babel.config.js","mtime":1650964597000},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652258014056},{"path":"C:\\Users\\Mohamed Tamim\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1652258014277}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["utils_web3","Web3","require","types","utils","store","truffle_contract","constants","BigNumber","eth_util","newERC721","owner","asset","abi","contractAbi","contractAt","contract","error","new","name","symbol","miner","contractURI","uri","from","message","newERC1155","totalSupply","getFullAsset","getAssetContract","mintToken","mint","tokenId","signature","v","r","s","fees","tokenURI","mintErc1155Token","quantity","isApprovedForAll","operator","setApprovalForAll","coinbase","approved","type","keyAssetType","getBalance","getWeb3","web3","address","NULL_ADDRESS","eth","balance","fromWei","toString","valueAssetType","balanceOf","getNFTBalance","contractAddress","transferAsset","to","transferFrom","transferAsset1155","data","encodeParameters","safeTransferFrom","burnAsset","burn","burnAsset1155","cancelOrder","getExchangeContract","orderKey","getOrderKey","tupleOrderKey","cancel","exchangeOrder","order","createOrder","Sig","parseSignatureHex","buyerFeeSig","tupleOrder","value","toWei","exchange","buyerFee","amount","buyer","exchangeAuction","getAuctionContract","createAuctionOrder","ownerSig","buyerSig","bidSignature","tupleAuctionOrder","bidBuying","recipients","openBlindBox","getBlindBoxContract","createBlindOrder","tupleBlindOrder","open","on","hash","commit","exchangeAddress","auctionAddress","blindBoxAddress","allowancePayToken","spender","allowance","approvePayToken","approve","MAX_APPROVE_AMOUNT","validVParamValues","ecSignatureRSV","_parseSignatureHexAsRSV","includes","ecSignatureVRS","_parseSignatureHexAsVRS","Error","signatureHex","signatureBuffer","toBuffer","slice","ecSignature","bufferToHex","fromRpcSig","getAssetType","keyOrderType","valueOrderType","key","keyCommonType","valueCommonType"],"sources":["C:/Users/Mohamed Tamim/Desktop/SONGTRADER-V2-FULL/fingernft_blindbox/fingernft_blindbox/vue-web/src/util/sdk/index.js"],"sourcesContent":["import utils_web3 from \"@/util/web3/index\";\nvar Web3 = require(\"web3\");\nimport types from \"./types\";\nimport utils from \"./utils\";\nimport store from \"@/store\";\nimport truffle_contract from \"@truffle/contract\";\nimport constants from \"./constants\";\nimport BigNumber from \"bignumber.js\";\nconst eth_util = require(\"ethereumjs-util\");\n\nexport default {\n  async newERC721(owner, asset) {\n    let abi = utils.contractAbi(\"CreateNFT721\");\n    let contract = await utils.contractAt(abi);\n    if (contract.error) return contract;\n\n    try {\n      return await contract.new(\n        asset.name,\n        asset.symbol,\n        asset.miner,\n        asset.contractURI,\n        asset.uri,\n        { from: owner }\n      );\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async newERC1155(owner, asset) {\n    let abi = utils.contractAbi(\"CreateNFT1155\");\n    let contract = await utils.contractAt(abi);\n    if (contract.error) return contract;\n    try {\n      return await contract.new(\n        asset.name,\n        asset.symbol,\n        asset.miner,\n        asset.contractURI,\n        asset.uri,\n        { from: owner }\n      );\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async totalSupply(asset) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n    return await contract.totalSupply();\n  },\n  async mintToken(owner, asset) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n\n    if (contract.error) return contract;\n    try {\n      return await contract.mint(\n        asset.tokenId,\n        asset.signature.v,\n        asset.signature.r,\n        asset.signature.s,\n        asset.fees,\n        asset.tokenURI,\n        { from: owner }\n      );\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async mintErc1155Token(owner, asset) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n    try {\n      return await contract.mint(\n        asset.tokenId,\n        asset.signature.v,\n        asset.signature.r,\n        asset.signature.s,\n        asset.fees,\n        asset.quantity,\n        asset.tokenURI,\n        { from: owner }\n      );\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async isApprovedForAll(asset, owner, operator) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n\n    try {\n      return await contract.isApprovedForAll(owner, operator);\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async setApprovalForAll(asset, coinbase, operator, approved) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n\n    try {\n      return await contract.setApprovalForAll(operator, approved, {\n        from: coinbase,\n      });\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  getFullAsset(asset) {\n    let type = types.keyAssetType(asset.type);\n    let abi = utils.contractAbi(type);\n    asset.abi = abi;\n    return asset;\n  },\n  async getBalance(asset, owner) {\n    var web3 = await utils_web3.getWeb3();\n    try {\n      if (asset.address == this.NULL_ADDRESS()) {\n        let balance = await web3.eth.getBalance(owner);\n        return web3.utils.fromWei(balance.toString(), \"ether\");\n      } else {\n        asset.type = types.valueAssetType(\"ERC20\");\n        asset = this.getFullAsset(asset);\n        let contract = await this.getAssetContract(asset);\n        if (contract.error) return contract;\n        return await contract.balanceOf(owner);\n      }\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async getNFTBalance(asset, owner) {\n    var web3 = await utils_web3.getWeb3();\n    try {\n      asset = this.getFullAsset(asset);\n      let contract = await this.getAssetContract(asset);\n      if (contract.error) return contract;\n      if (types.keyAssetType(asset.type) == \"ERC1155\") {\n        return await contract.balanceOf(owner, asset.tokenId);\n      } else {\n        return await contract.balanceOf(owner);\n      }\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async getAssetContract(asset) {\n    asset.contractAddress = asset.address;\n    return await utils.contractAt(asset.abi, asset.contractAddress);\n  },\n  async transferAsset(asset, from, to) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n    try {\n      return await contract.transferFrom(from, to, asset.tokenId, {\n        from: from,\n      });\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async transferAsset1155(asset, from, to) {\n    var web3 = await utils_web3.getWeb3();\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n    try {\n      let data = web3.eth.abi.encodeParameters(\n        [\"address\", \"address\", \"uint256\", \"uint256\"],\n        [from, to, asset.tokenId, asset.quantity]\n      );\n      return await contract.safeTransferFrom(\n        from,\n        to,\n        asset.tokenId,\n        asset.quantity,\n        data,\n        { from: from }\n      );\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async burnAsset(asset) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n\n    try {\n      return await contract.burn(asset.tokenId, { from: asset.owner });\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async burnAsset1155(asset) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n    try {\n      return await contract.burn(asset.owner, asset.tokenId, asset.quantity, {\n        from: asset.owner,\n      });\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async cancelOrder(owner, asset) {\n    let contract = await this.getExchangeContract(asset, owner);\n    if (contract.error) return contract;\n\n    let orderKey = utils.getOrderKey(asset);\n    if (!orderKey) return { error: \"error Token\" };\n    orderKey = utils.tupleOrderKey(orderKey);\n    try {\n      return await contract.cancel(orderKey, { from: owner });\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async exchangeOrder(owner, asset) {\n    let contract = await this.getExchangeContract(asset);\n    if (contract.error) return contract;\n\n    let order = utils.createOrder(asset);\n    if (!order) return { error: \"error Token\" };\n    let Sig = this.parseSignatureHex(asset.signature);\n    Sig = [Sig.v, Sig.r, Sig.s];\n    let buyerFeeSig = asset.buyerFeeSig;\n    buyerFeeSig = [buyerFeeSig.v, buyerFeeSig.r, buyerFeeSig.s];\n    order = utils.tupleOrder(order);\n    let value = Web3.utils.toWei(asset.value, \"ether\").toString();\n    try {\n      return await contract.exchange(\n        order,\n        Sig,\n        asset.buyerFee,\n        buyerFeeSig,\n        asset.amount,\n        asset.buyer,\n        { from: owner, value: value }\n      );\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async exchangeAuction(owner, asset) {\n    let contract = await this.getAuctionContract(asset);\n    if (contract.error) return contract;\n    let order = utils.createAuctionOrder(asset);\n    if (!order) return { error: \"error Token\" };\n    let ownerSig = this.parseSignatureHex(asset.signature);\n    ownerSig = [ownerSig.v, ownerSig.r, ownerSig.s];\n    let buyerSig = this.parseSignatureHex(asset.bidSignature);\n    buyerSig = [buyerSig.v, buyerSig.r, buyerSig.s];\n    let buyerFeeSig = asset.buyerFeeSig;\n    buyerFeeSig = [buyerFeeSig.v, buyerFeeSig.r, buyerFeeSig.s];\n    order = utils.tupleAuctionOrder(order);\n\n    let value = Web3.utils.toWei(asset.value, \"ether\").toString();\n\n    try {\n      return await contract.exchange(\n        order,\n        ownerSig,\n        asset.bidBuying,\n        buyerSig,\n        asset.recipients,\n        asset.buyerFee,\n        buyerFeeSig,\n        asset.buyer,\n        { from: owner, value: value }\n      );\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async openBlindBox(owner, asset) {\n    let contract = await this.getBlindBoxContract(asset);\n    if (contract.error) return contract;\n    let order = utils.createBlindOrder(asset);\n    if (!order) return { error: \"error Token\" };\n    let Sig = this.parseSignatureHex(asset.signature);\n    Sig = [Sig.v, Sig.r, Sig.s];\n    let buyerFeeSig = asset.buyerFeeSig;\n    buyerFeeSig = [buyerFeeSig.v, buyerFeeSig.r, buyerFeeSig.s];\n    order = utils.tupleBlindOrder(order);\n    let value = Web3.utils.toWei(asset.value, \"ether\").toString();\n    try {\n      return await contract\n        .open(\n          order,\n          Sig,\n          asset.buyerFee,\n          buyerFeeSig,\n          asset.amount,\n          asset.buyer,\n          { from: owner, value: value }\n        )\n        .on(\"transactionHash\", function(hash) {\n          store.commit(\"BLINDBOX_SIGNED\", true);\n        });\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n\n  async getExchangeContract(asset, owner) {\n    let abi = utils.contractAbi(\"EXCHANGE\");\n    asset.contractAddress = asset.exchangeAddress;\n    return await utils.contractAt(abi, asset.contractAddress);\n  },\n  async getAuctionContract(asset) {\n    let abi = utils.contractAbi(\"AUCTION\");\n    asset.contractAddress = asset.auctionAddress;\n    return await utils.contractAt(abi, asset.contractAddress);\n  },\n  async getBlindBoxContract(asset) {\n    let abi = utils.contractAbi(\"BLINDBOX\");\n    asset.contractAddress = asset.blindBoxAddress;\n    return await utils.contractAt(abi, asset.contractAddress);\n  },\n  async allowancePayToken(asset, owner, spender) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n    try {\n      return await contract.allowance(owner, spender);\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async approvePayToken(asset, owner, spender) {\n    asset = this.getFullAsset(asset);\n    let contract = await this.getAssetContract(asset);\n    if (contract.error) return contract;\n    try {\n      return await contract.approve(spender, constants.MAX_APPROVE_AMOUNT, {\n        from: owner,\n      });\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  parseSignatureHex(signature) {\n    if (!signature) {\n      return {\n        v: 0,\n        r: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        s: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n      };\n    }\n    const validVParamValues = [27, 28];\n    const ecSignatureRSV = _parseSignatureHexAsRSV(signature);\n    if (validVParamValues.includes(ecSignatureRSV.v)) {\n      return ecSignatureRSV;\n    }\n    const ecSignatureVRS = _parseSignatureHexAsVRS(signature);\n    if (validVParamValues.includes(ecSignatureVRS.v)) {\n      return ecSignatureVRS;\n    }\n    throw new Error(\"Invalid signature\");\n    function _parseSignatureHexAsVRS(signatureHex) {\n      const signatureBuffer = eth_util.toBuffer(signatureHex);\n      let v = signatureBuffer[0];\n      if (v < 27) {\n        v += 27;\n      }\n      const r = signatureBuffer.slice(1, 33);\n      const s = signatureBuffer.slice(33, 65);\n      const ecSignature = {\n        v,\n        r: eth_util.bufferToHex(r),\n        s: eth_util.bufferToHex(s),\n      };\n      return ecSignature;\n    }\n\n    function _parseSignatureHexAsRSV(signatureHex) {\n      const { v, r, s } = eth_util.fromRpcSig(signatureHex);\n      const ecSignature = {\n        v,\n        r: eth_util.bufferToHex(r),\n        s: eth_util.bufferToHex(s),\n      };\n      return ecSignature;\n    }\n  },\n  getAssetType(asset) {\n    switch (asset.type) {\n      case \"ERC721\":\n        return 3;\n      case \"ERC1155\":\n        return 2;\n    }\n    return 0;\n  },\n  keyOrderType(value) {\n    return types.keyOrderType(value);\n  },\n  valueOrderType(key) {\n    return types.valueOrderType(key);\n  },\n  keyCommonType(value) {\n    return types.keyCommonType(value);\n  },\n  valueCommonType(key) {\n    return types.valueCommonType(key);\n  },\n  keyAssetType(value) {\n    return types.keyAssetType(value);\n  },\n  valueAssetType(key) {\n    return types.valueAssetType(key);\n  },\n  NULL_ADDRESS() {\n    return constants.NULL_ADDRESS;\n  },\n};\n"],"mappings":"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"}]}