import enLocale from "element-ui/lib/locale/lang/en";
export default {
  language: {
    choose: "please select a language",
    English: "English",
    Chinese: "Chinese",
  },
  global: {
    create: "Create",
    createSuccess: "Create success",
    createFail: "Create fail",
    delete: "Delete",
    deleteTip: "Cannot recover after deleting data, do you want to continue?",
    tip: "Tip",
    state: "State",
    operation: "Operation",
    normal: "Normal",
    disabled: "Disabled",
    edit: "Edit",
    cancel: "Cancel",
    update: "Update",
    updateSuccess: "Update success",
    updateFail: "Update fail",
    updateTip: "Are you sure you want to update the data?",
    confirm: "Confirm",
    disable: "Disable",
    enable: "Enable",
    detail: "Detail",
    success: "Success",
    fail: "Fail",
    editSuccess: "Edited successfully",
    deleteFail: "Delete fail",
    deleteSuccess: "Delete success",
    incorrectAddress: "Incorrect address",
    repeatAddress: "Repeat address",
    save: "Save",
    saveTip: "Are you sure you want to save the data?",
    saveSuccess: "Save success",
    no: "No",
    yes: "Yes",
    loadingText: "Loading...",
    errSignature: "Signature Failed",
    errNetwork: "Network Wrong",
    changeNetworkTo: "Change network to ",
    deploy: "Deploy",
    contractAddress: "Address",
    walletNotConnected: "wallet not connected",
    connectWallet: "Connect Wallet",
    init: "Init",
    add: "Add",
    isRequired: " is required",
  },
  config: {
    website: "Website",
    contract: "Contract",
    ipfs: "IPFS",
    blindbox: "Blind Box",
    exchangeRate: "Exchange Rates",
    syncBlock: "Sync block",
    ethRPC: "Ethereum RPC",
    site: "Website URL",
    cdnUrl: "CDN URL",
    nftVerify: "NFT auto verify",
    loginMessage: "Login Sign Message",
    networkId: "Ethereum network ID",
    manual: "Manual",
    auto: "Auto",
    sellerFee: "Seller fee(1/10000)",
    buyerFee: "Buyer fee(1/10000)",
    Multicall: "Multicall address",
    NFT721: "NFT721 address",
    NFT1155: "NFT1155 address",
    TransferProxy: "TransferProxy address",
    TransferProxyForDeprecated: "TransferProxyForDeprecated address",
    ERC20TransferProxy: "ERC20TransferProxy address",
    ExchangeState: "ExchangeState address",
    ExchangeOrdersHolder: "ExchangeOrdersHolder address",
    NftExchange: "NftExchange address",
    BlindState: "BlindState address",
    CopyERC721: "CopyERC721 address",
    BlindBox: "BlindBox address",
    AuctionState: "AuctionState address",
    AuctionExchange: "AuctionExchange address",
    Auction: "Auction address",
    MintKey: "Miner private key",
    TransKey: "BuyerFeeSigner private key",
    ipfsUrl: "IPFS URL",
    ipfsServerIp: "IPFS IP",
    ipfsServerPort: "IPFS port",
    ipfsRemoteServer: "IPFS pin URL",
    lastBlock: "Monitor start block",
    blockConfirmation: "Block Confirmations",
    maxBlockOneTime: "Number of blocks to synchronize once",
    syncInfo: "Synchronize detail",
    lastBlockNumber: "Latest block number",
    earlyBlockNumber: "Earliest block number",
    txAmount: "Total number of transactions",
    staticLocalPath: "Static file storage path(Absolute path: '/...')",
    BlindSellerFee: "Seller fee(1/10000)",
    BlindBuyerFee: "Buyer fee(1/10000)",
    BlindBoxAddress: "BlindBox address",
    PaytokenUrl: "Exchange rate api url",
    PaytokenDemo: "Example: Exchange rates return json content",
    PaytokenBaseKey: "BaseArrayKey",
    PaytokenKeyName: "TokenSymbolKey",
    PaytokenValueName: "TokenUSDTKey",
    topCollections: "Top Collections",
    allCollections: "Collections",
    nft: "NFT",
    topSellers: "Top Sellers",
    hotBids: "Hot Bids",
    auction: "Auction",
    custom: "Custom",
    // network
    network: "Network",
    network_chainId: "ChainId",
    network_name: "Name",
    network_coinSymbol: "CoinSymbol",
    network_symbol: "Symbol",
    network_default: "Default",
    network_blockTime: "BlockTime(Second)",
    network_rpc: "Rpc",
    network_id: "NetworkId",
    network_explorer: "Explorer",
    network_hasBlindbox: "HasBlindbox",
    network_hasAuction: "HasAuction",
    network_opensea: "Opensea",
    network_miner: "Miner Private(Authorize Create Nft)",
    network_beneficiary: "Beneficiary Address(Charge Commission)",
    network_buyerFeeSigner:
      "BuyerFeeSigner Private(Authorize Signature Commission Charges)",
    // wallet
    wallet: "Wallet",
    // contract
    contractName: "Contract Name",
    contractSymbol: "Contract Symbol",
    deployTip: "Are you sure you want to depoly the contract?",
    generatePrivate: "Generate Private",
    addOperator: "Add Operator",
    addOperators: "Add Operators",
    contractDeploying: "Contract Deploying",
    addingOperator: "Adding Operator",
    to: "To",
    deployConfig: "Deploy Config",
    deployContract: "Deploy Contract",
    goNetwork: "Go to config network",
    pleaseFirstSet: "Please first deploy ",
    transferOwnership: "transferOwnership",
  },
  profile: {
    emptyPassword: "Password cannot be empty",
    emptyOldPassword: "Old Password cannot be empty",
    emptyNewPassword: "New Password cannot be empty",
    emptyConfirmPassword: "Confirm Password cannot be empty",
    limitPassword: "Password length cannot be less than 6 digits",
    resetPassword: "Please enter the password again",
    unsamePassword: "The two passwords are inconsistent!",
    changeSuccess: "Change success",
  },
  nofound: {
    back: "Back",
    reminder: "Reminder",
    errorNetworkTip:
      "Please check if the address you entered is correct, please click the button below to return to the homepage or send an error report",
    toHome: "Back to homepage",
    toTop: "Top",
    noContent: "No related content found",
  },
  popular: {
    select: "Select",
    selected: "Selected",
    delete: "Delete",
    hotNFT: "Hot NFT",
    selectNFT: "Select NFT",
    save: "Save",
    blindbox: "BlindBox",
    selectBlindBox: "Select BlindBox",
    topCollection: "Top Collections",
    selectHotCollection: "Select Hot Collection",
    hotCollection: "Hot Collection",
    selectSeller: "Select Seller",
    hotSeller: "Hot Seller",
  },
  collection: {
    name: "Name",
    description: "Brief",
    createTime: "Create time",
    picture: "Picture",
    type: "Type",
    symbol: "Symbol",
    verify: "Verify",
    unverify: "Unverify",
    verified: "Verified",
    owner: "Owner",
  },
  title: {
    manageBackground: "FingerNFT Manage Background",
  },
  login: {
    title: "Management System",
    login: "Login",
    verificationCode: "Verification Code",
  },
  notify: {
    title: "Failed",
  },
  form: {
    limitAdministrator:
      "Administrator password length should be greater than 6",
    emptyAdministrator: "Account cannot be empty",
    emptyPassword: "Password cannot be empty",
  },
  placeholder: {
    manager: "administrator",
    password: "password",
  },
  dashboard: {
    selectDate: "Select Date",
    userData: "User Data",
    activeUser: "Active User",
    todayLogin: "Today Login",
    yesterdayLogin: "Yesterday Login",
    growth: "Growth",
    userAdd: "New Add",
    todayAdd: "Today Add",
    yesterdayAdd: "Yesterday Add",
    revenueData: "Revenue Data",
    statement: "Today Revenue Statement",
    totalFlow: "Total Flow",
    platform: "Platform",
    profit: "Profit",
    gas: "Gas Cost",
    nftName: "NFT Name",
    nftType: "NFT Type",
    sales: "Sales",
    totalMoney: "Money(ETH)",
    information: "Activity Information",
    information1: "1、Art type NFT meeting 50% commission",
    information2:
      "2、Photography is NFT, and the uplink fee is paid by the platform",
    profitRatio: "Profit Ratio",
    salesRatio: "Sales Ratio",
    salesContrast: "Sales Contrast",
    moneyContrast: "Money Contrast",
    nftManagement: "NFT Management",
    totalNft: "Total NFT",
    addNft: "New NFT",
    changeHandsNft: "Change Hands NFT",
    reviewedNft: "Reviewed NFT",
    count: "Count",
    addNftContrast: "New NFT Contrast",
    addNftRatio: "New NFT Ratio",
    changeHandsNftContrast: "Change Hands NFT Contrast",
    changeHandsNftRatio: "Change Hands NFT Ratio",
    yesterdaySales: "Yesterday Sales",
    todaySales: "Today Sales",
    yesterdayMoney: "Yesterday Money",
    todayMoney: "Today Money",
    yesterdayChangeHands: "Yesterday Change Hands",
    todayChangeHands: "Today Change Hands",
    noData: "No Data",
    ranking: "Ranking",
    rankLegend: "Today Sales",
    rankTitle: "Blind Box Sales Ranking",
    nftData: "NFT Data",
    blindboxData: "Blindbox Data",
    totalUsers: "Total users",
    newAdd: "Newly added",
    dailyActiveNumber: "Daily active number",
    dailyActivePersonTimes: "Daily active person times",
    totalNumber: "Total number",
    nftDetails: "NFT details",
    sale: "Sale",
    buy: "Buy",
    bid: "Bid",
    accept: "Accept",
    auction: "Auction",
    openedNumber: "Opened number",
    nftTotalNumber: "NFT total number",
    nftActivityDetails: "NFT activity details",
    nft1155Number: "NFT1155 number",
    nft721Number: "NFT721 number",
    auctionBids: "Auction bids",
    auctionAccept: "Auction accept",
    userDetails: "User details",
    originalNumber: "Original number",
    additionalNumber: "Additional number",
    statistics: "Statistics",
    todayStatistics: "Today Statistics",
    blindboxOpened: "Blindbox opened",
    nftAddedNumber: "NFT added number",
    nftSaleNumber: "NFT sale number",
    todayData: "Today Data",
  },
  userData: {
    userManagement: "userManagement",
    title: "retrieving customer information",
    placeholder1: "please enter a username",
    placeholder2: "please enter the address",
    placeholder3: "please select authentication status",
    select: "select",
    authenticated: "authenticated",
    unauthenticated: "unauthenticated",
    authenticationFailed: "authentication failed",
    address: "address",
    nickname: "nickname",
    avatar: "avatar",
    nftQuantityHeld: "nft quantity held",
    nftQuantityCreated: "nft quantity created",
    nftQuantitySold: "nft quantity sold",
    nftQuantityBought: "nft quantity bought",
    accumulatedVolume: "accumulated volume",
    accumulatedMoney: "accumulated money",
    certificationStatus: "certification status",
    operation: "operation",
    details: "details",
    immediateCertification: "immediate certification",
    cancelCertification: "cancel certification",
    authentication: "authentication",
    certificationPassed: "certification passed",
    tip: "tip",
    cancel: "cancel",
    confirm: "confirm",
    tipContent: "This operation is to cancel authentication. Continue?",
    loadingText: "loading...",
  },
  whiteUser: {
    placeholder: "please enter username",
    select: "select",
    add: "add",
    userName: "username",
    operation: "operation",
    delete: "delete",
    deleteTip: "This operation is a delete operation. Do you want to continue?",
    cancel: "cancel",
    confirm: "confirm",
    emptyName: "username cannot be empty",
  },
  sortManagement: {
    create: "create",
    categoryId: "categoryId",
    categoryName: "categoryName",
    weight: "weight",
    state: "state",
    operation: "operation",
    normal: "normal",
    disabled: "disabled",
    edit: "edit",
    cancel: "cancel",
    confirm: "confirm",
    disable: "disable",
    enable: "enable",
    message1: "classification name cannot be empty",
    message2: "sorting cannot be empty",
    detail: "detail",
    success: "success",
    createSuccess: "classification created successfully",
    fail: "fail",
    editSuccess: "Edited successfully",
    tipContent: "This operation is disabled. Continue?",
    tip: "tip",
    cantDisabled: "There is NFT under this type, which cannot be disabled",
    successfullyDisabled: "Successfully disabled",
    disablingFailed: "Disabling failed",
    operationEnabled: "This operation is enabled. Continue?",
    enabledSuccessfully: "Enabled successfully",
    activationFailed: "Activation failed",
    loadingText: "Is being queried. . .",
  },
  paytoken: {
    create: "Create",
    edit: "Edit",
    delete: "Delete",
    loadingText: "loading...",
    name: "Name",
    emptyName: "Name is required",
    symbol: "Symbol",
    emptySymbol: "Symbol is required",
    address: "Address",
    emptyAddress: "Address is required",
    default: "Default",
    type: "Type",
    decimals: "Decimals",
    emptyDecimals: "Decimals is required",
    operate: "Operate",
    no: "No",
    yes: "Yes",
    avatar: "Avatar",
    brief: "Brief",
    token: "Token",
    tokenId: "TokenId",
  },
  contract: {
    name: "Name",
    emptyName: "Name is required",
    symbol: "Symbol",
    emptySymbol: "Symbol is required",
    address: "Address",
    emptyAddress: "Address is required",
    owner: "Owner",
    emptyOwner: "Owner is required",
    cover: "Avatar",
    isSystem: "Is System",
    type: "Type",
    emptyType: "Type is required",
    errorType: "Type is error",
  },
  nftManagement: {
    placeholder1: "please enter creator",
    placeholder2: "please enter nft address",
    placeholder3: "please enter tokenId",
    placeholder4: "please select authentication status",
    select: "select",
    loadingText: "Is being queried. . .",
    name: "name",
    authenticationStatus: "authenticationStatus",
    unauthenticated: "unauthenticated",
    certificationPassed: "certificationPassed",
    authenticationFailed: "authenticationFailed",
    nftAddress: "nftAddress",
    creator: "creator",
    type: "type",
    createTime: "createTime",
    quantity: "quantity",
    operation: "operation",
    details: "details",
    immediateCertification: "immediateCertification",
    cancelCertification: "cancelCertification",
    sellQuantity: "sellQuantity",
    onsellStatus: "onsellStatus",
    stopSelling: "Stop selling",
    onSale: "On Sale",
    isSync: "isSync",
    yes: "yes",
    no: "no",
    itemOwner: "itemOwner",
    price: "price",
    authentication: "authentication",
    picture: "picture",
  },
  transactionManagement: {
    placeholder: "please enter the user address",
    select: "select",
    seller_address: "seller_address",
    buyer_address: "buyer_address",
    sellTokenAddress: "sellToken",
    buyerTokenAddress: "buyerToken",
    transactionCurrency: "transactionCurrency",
    dealTime: "dealTime",
    oneDayCounts: "Trading volume within 24 hours",
    userCounts: "Number of trading users within 24 hours",
    accumulatedMoney: "Transaction amount within 24 hours",
  },
  systemManagement: {
    //admin
    placeholder1: "please enter an administrator name",
    select: "select",
    add: "add",
    export: "Export",
    administratorID: "administratorID",
    administratorName: "UserName",
    administratorRoles: "administratorRole",
    operation: "operation",
    edit: "edit",
    delete: "delete",
    administratorPassword: "Password",
    administratorAvatar: "Avatar",
    pleaseSelect: "please select",
    create: "create",
    rule1: "Administrator name cannot be empty",
    rule2: "Password cannot be empty",
    addingAdministratorSucceeded: "Adding succeeded",
    updateAdministratorSucceeded: "Update succeeded",
    administratorInformation: "Information",
    //log
    placeholder2: "please enter an operation manager",
    operationsAdministrator: "operations administrator",
    ipAddress: "IP address",
    operatingTime: "operating time",
    operatingClass: "operating class",
    operationAction: "operation action",
    operatingState: "operating state",
    operationResult: "operation result",
    noteInformation: "note information",
    generalOperation: "general operation",
    safeOperation: "safe operation",
    orderOperation: "order operation",
    otherOperations: "other operations",
    rule3: "Role name cannot be empty",
    placeholder3: "please enter role name",
    roleName: "role name",
    description: "description",
    authorization: "authorization",
    permissionConfiguration: "Permission configuration",
    roleAddedSuccessfully: "Role added successfully",
    updateAdministratorFailed: "Update administrator failed",
    administratorDeletedSuccessfully: "Administrator deleted successfully",
    failedToDeleteAdministrator: "Failed to delete administrator",
    authorizationSucceeded: "Authorization succeeded",
    authorizationFailed: "Authorization failed",
  },
  authentication: {
    success: "success",
    fail: "fail",
    completed: "Authentication completed",
  },
  router: {
    dashboard: "Dashboard",
    popular: "Popular Management",
    collectionTop: "Top Collection",
    collectionHot: "Hot Collection",
    nft: "Hot NFT",
    seller: "Hot Seller",
    bid: "Hot Bid",
    auction: "Hot Auction",
    userManagement: "User Management",
    whiteUserManagement: "WhiteUser Management",
    sortManagement: "Category Management",
    paytoken: "Tokens Management",
    nftManagement: "NFT Management",
    transactionManagement: "Transaction Management",
    transactionInformation: "Transaction Information",
    transactionStatistics: "Transaction Statistics",
    systemManagement: "System Management",
    administratorManagement: "Administrator Management",
    operationLog: "Operation Log",
    roleManagement: "Role Management",
    setting: "Setting",
    passwordUpdate: "Password Update",
    languageUpdate: "Language Update",
    blindManager: "Blind Manager",
    blindType: "Blind Type",
    blindBox: "Blind Box",
    blindNft: "Blind NFT",
    config: "Config",
    network: "Network Config",
    wallet: "Wallet Config",
    contract: "Contract Management",
    ipfs: "IPFS Config",
    homeConfig: "Home Config",
    webConfig: "Web Config",
    contractConfig: "Contract Config",
  },
  navbar: {
    fullScreen: "full screen",
    layoutSize: "layout size",
    dashboard: "dashboard",
    passwordUpdate: "password update",
    languageUpdate: "English",
    logout: "logout",
    user: "user",
    connectWallet: "Connect Wallet",
  },
  util: {
    cancel: "cancel",
    confirm: "confirm",
    errors: "There are errors",
    success: "success",
    successfullyDeleted: "Successfully deleted",
    deleteFailed: "Delete failed",
    tipContent1: "This operation is to cancel authentication. Continue?",
    tip: "tip",
    loadingText: "Is being queried. . .",
    fail: "fail",
  },
  password: {
    oldPassword: "Old Password",
    newPassword: "New Password",
    confirmPassword: "Confirm password",
  },
  tagView: {
    refresh: "refresh",
    close: "close",
    closeOthers: "close others",
    closeAll: "close all",
  },
  response: {
    500: "Server exception",
    607: "The verification code cannot be empty",
    606: "Verification code is not correct",
    605: "User name or password is incorrect",
    608: "The user account is locked and unavailable",
    609: "Authentication failed",
    502: "Failed to record or update online record",
    503: "Failed to update user exit record",
    501: "unlogin",
    506: "unauthz",
    401: "Bad arguments",
    505: "Updated data failed",
    604: "Employees cannot delete their own accounts",
    640: "Role already exists",
    642: "There is an administrator in the current role, which cannot be deleted",
    641: "The super permission of the current role cannot be changed",
    600: "Employee already exists",
    602: "Employee password length cannot be less than 6",
  },
  blind: {
    operation: "Operation",
    add: "Add",
    edit: "Edit",
    cancel: "Cancel",
    confirm: "Confirm",
    delete: "Delete",
    deleteTip: "This operation is a delete operation. Do you want to continue?",
    success: "Success",
    messageSuccess: "Operation Success",
    fail: "Fail",
    messageFail: "Operation Fail",
    synchronize: "Synchronize",
    status: "Status",
    sign: "Sign",
    unsign: "Unsign",
    syncState: "Sync State",
    sync: "Sync", //Sync
    unsync: "Unsync", //Unsync
    time: {
      to: "To",
      start: "Start Date",
      end: "End Date",
    },
    placeholder: "please enter blind type",
    select: "select",
    type: {
      title: "Blind Type",
      name: "Name",
      brief: "Brief",
      emptyName: "Name cannot be empty",
      emptyBrief: "Brief cannot be empty",
      emptyContractAddress: "Address cannot be empty",
      emptyCopyERC721: "CopyERC721 address is empty",
    },
    box: {
      emptyName: "Name cannot be empty",
      emptyOwner: "Receiving address cannot be empty",
      emptyType: "Blind Type cannot be empty",
      limitAmount: "Amount must be greater than 1",
      limitOpenAmount: "Open amount must be greater than 1",
      emptyPicture: "Picture cannot be empty",
      limitPrice: "Price must be greater than 0",
      emptyPayToken: "Pay Token cannot be empty",
      emptyTimes: "Activity date cannot be empty",
      emptyCover: "Cover cannot be empty",
      openGif: "Open gif",
      openedGif: "Opened gif",
      config: "NFT List",
      property: "Property",
      image: "Image",
      pleaseSelect: "Please Select",
      pleaseSelectSync: "Please Select Sync State",
      blindType: "Blind Type",
      blindBoxName: "BlindBox contract name",
      name: "Name",
      brief: "Brief",
      amount: "Amount",
      repetition: "Repeat",
      owner: "Payee",
      times: "Active Date",
      NFTAmount: "Open Amount",
      price: "Price",
      paytoken: "Pay Token",
      address: "Address",
      picture: "Picture",
      syncTip:
        "Is the blind box determined to be synchronize? If there is data on the synchronize, it cannot be modified?",
      salt: "Salt",
      sign: "Sign",
      signTip:
        "After the sign is passed, the blind box will be released to the market, and you can modify it before the event has started. Are you sure to sign the box?",
      authorize: "Authorize",
      integer: "please enter an integer",
      owner: "Receiving address",
      anim1: "Before opening",
      anim2: "After opening",
      totalAmount: "Total amount",
      NFTListInfo: "NFT list info",
      addNFT: "Add NFT",
      success: "Success",
      isRepeat: "Repeatable",
      unRepeat: "Unrepeatable",
      NFTTypes: "NFT types",
      limitTotalAmount: "The total amount cannot exceed ",
      limitMaxAmount: "The maximum amount cannot exceed ",
      probability: "Probability",
    },
    set: {
      select: "Select",
      availableAmount: "Available amount",
      amount: "Amount",
      picture: "Picture",
      audioORvideo: "Audio OR Video",
      back: "Back",
      emptyNft: "NFT cannot be empty",
      reminder: "Reminder",
      errorNetworkTip:
        "Please check if the address you entered is correct, please click the button below to return to the homepage or send an error report",
      toHome: "Back to homepage",
      toTop: "Top",
      noContent: "No related content found",
    },
    property: {
      key: "Property Key",
      value: "Property Value",
    },
    nft: {
      blindType: "Blind Type",
      property: "Property",
      brief: "Brief",
      address: "Address",
      URI: "URI",
      tokenId: "Token Id",
      name: "Name",
      amount: "Amount",
      NFTAmount: "NFT Amount",
      price: "Price",
      type: "Type",
      picture: "Picture",
      audioORvideo: "Audio OR Video",
      pleaseSelect: "Please Select",
      syncTip:
        "Is the NFT determined to be synchronize? If there is data on the synchronize, it cannot be modified?",
      emptyName: "Name cannot be empty",
      emptyAdress: "Address cannot be empty",
      emptyType: "Type cannot be empty",
      emptynftType: "NFT type cannot be empty",
      emptyAmount: "Amount cannot be empty",
      emptyPicture: "Picture cannot be empty",
      emptyTokenId: "TokenId cannot be empty",
      ERC721Address: "ERC721 address",
    },
    paytoken: {
      picture: "picture",
    },
    config: {
      key: "Key",
      value: "Value",
      emptyKey: "Key cannot be empty",
      emptyValue: "Value cannot be empty",
    },
  },
  connect: {
    goBack: "Go back",
    text1: "Connect your wallet",
    text2:
      "Connect with one of available wallet providers or create a new wallet.",
    text3: "What is wallet?",
    text4: "Metamask",
    text5:
      "We do not own your private keys and cannot access your funds without your confirmation.",
    wallet: "YOROI Wallet",
    walletconnect: "WalletConnect",
  },
  ...enLocale,
};
