{"remainingRequest":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\src\\utils\\web3\\index.js","dependencies":[{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\src\\utils\\web3\\index.js","mtime":1650964597000},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\babel.config.js","mtime":1650964597000},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652081880827},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1652081856293},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1652081906982}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Web3","store","i18n","tools","promisify","inner","Promise","resolve","reject","err","res","checkNetwork","web3","getWeb3","ret","config","state","network","connected","type","message","t","app","configNetwork","parseInt","chainId","currentProvider","title","name","getAccount","coinbase","connectWeb3","error","window","ethereum","request","method","wallet","cb","eth","getChainId","networkId","getCoinbase","once","accountsChanged","on","chainChanged","disconnect","walletType","accounts","dispatch","length","channelId","messageBox","getTransaction","tx","getTransactionReceipt","decodeLog","inputs","hexString","options","abi","sign","address","utils","toChecksumAddress","personal","signature","checkWeb3","result","isConnected","console","log"],"sources":["C:/Users/97154/Desktop/SONGTRADER-V2-FULL/fingernft_blindbox/fingernft_blindbox/vue-admin/src/utils/web3/index.js"],"sourcesContent":["import Web3 from \"web3\";\nimport store from \"@/store\";\nimport i18n from \"@/i18n/i18n\";\nimport tools from \"@/utils/tools.js\";\nimport { Notification } from \"element-ui\";\n\nconst promisify = (inner) =>\n  new Promise((resolve, reject) =>\n    inner((err, res) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(res);\n      }\n    })\n  );\n\nexport default {\n  checkNetwork() {\n    const web3 = this.getWeb3();\n    let ret = false;\n    let config = {};\n    if (!store.state.network.connected) {\n      Notification({\n        type: \"error\",\n        message: i18n.t(\"global.walletNotConnected\"),\n      });\n      return ret;\n    }\n\n    if (store.state.app.config && store.state.app.config.configNetwork) {\n      config = store.state.app.config.configNetwork;\n      ret = parseInt(config.chainId) === parseInt(web3.currentProvider.chainId);\n    }\n    if (!ret) {\n      Notification({\n        type: \"error\",\n        title: i18n.t(\"global.errNetwork\"),\n        message: i18n.t(\"global.changeNetworkTo\") + config.name,\n      });\n    }\n    return ret;\n  },\n  getAccount() {\n    return store.state.network.web3.coinbase;\n  },\n  async connectWeb3() {\n    var error = \"\";\n    if (window.ethereum) {\n      try {\n        var t = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        if (!t) {\n          error = \"MetaMask enable Error\";\n          return { error };\n        }\n        var web3 = new Web3(window.ethereum);\n        window.wallet = web3;\n        var networkId = await promisify((cb) => web3.eth.getChainId(cb));\n        var coinbase = await promisify((cb) => web3.eth.getCoinbase(cb));\n\n        window.ethereum.once(\"accountsChanged\", this.accountsChanged);\n        window.ethereum.on(\"chainChanged\", this.chainChanged);\n        window.ethereum.on(\"disconnect\", this.disconnect);\n        let walletType = \"metamask\";\n        return { networkId, coinbase, walletType };\n      } catch (e) {\n        error = e.message;\n      }\n    } else {\n      error = \"MetaMask not Install\";\n    }\n    return { error };\n  },\n  accountsChanged(accounts) {\n    if (!store.state.network.connected) return;\n    store.dispatch(\"disconnect\");\n    if (accounts.length) {\n      store.dispatch(\"connect\");\n    }\n  },\n  chainChanged(channelId) {\n    let config = {};\n    if (store.state.app.config && store.state.app.config.configNetwork) {\n      config = store.state.app.config.configNetwork;\n    }\n    if (parseInt(channelId) != parseInt(config.networkId)) {\n      tools.messageBox(\n        i18n.t(\"global.errNetwork\"),\n        i18n.t(\"global.changeNetworkTo\") + config.name\n      );\n    }\n  },\n  disconnect(error) {\n    if (!store.state.network.connected) return;\n    store.dispatch(\"disconnect\");\n  },\n  async getTransaction(tx) {\n    let web3 = this.getWeb3();\n    try {\n      return await promisify((cb) => web3.eth.getTransaction(tx, cb));\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async getTransactionReceipt(tx) {\n    let web3 = this.getWeb3();\n    try {\n      return await promisify((cb) => web3.eth.getTransactionReceipt(tx, cb));\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async decodeLog(inputs, hexString, options) {\n    let web3 = this.getWeb3();\n    try {\n      return await promisify((cb) =>\n        web3.eth.abi.decodeLog(inputs, hexString, options, cb)\n      );\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  getWeb3() {\n    return window.wallet;\n  },\n  async sign(message, address) {\n    var web3 = window.wallet;\n    try {\n      address = web3.utils.toChecksumAddress(address);\n      var signature = await promisify((cb) =>\n        web3.eth.personal.sign(message, address, cb)\n      );\n      return signature;\n    } catch (e) {\n      return { error: e.message };\n    }\n  },\n  async checkWeb3(web3) {\n    if (window.ethereum) {\n      try {\n        var result = window.ethereum.isConnected();\n        if (!result) return false;\n        return true;\n      } catch (e) {\n        console.log(\"checkWeb3 error\", e);\n      }\n    }\n    return false;\n  },\n};\n"],"mappings":"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"}]}