{"remainingRequest":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\src\\views\\blindBoxManagement\\blindBoxSet.vue?vue&type=style&index=0&id=71ba4df0&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\src\\views\\blindBoxManagement\\blindBoxSet.vue","mtime":1650964597000},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":1652081880732},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1652081880145},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\postcss-loader\\src\\index.js","mtime":1652081880241},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1652081887366},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652081880827},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1652081880134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudGFibGUtY29udGFpbmVyIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgaGVpZ2h0OiA2MHZoOwogIC50YWJsZS1ib2R5IHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHRvcDogMzVweDsKICAgIGxlZnQ6IDA7CiAgICByaWdodDogMDsKICAgIGJvdHRvbTogNTBweDsKICAgIG92ZXJmbG93LXk6IHNjcm9sbDsKICB9CiAgLnRhYmxlLWZvb3RlciB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICBsZWZ0OiAwOwogICAgcmlnaHQ6IDA7CiAgICBib3R0b206IDA7CiAgfQp9CgouZWwtdGFibGVfX3JvdyBhdWRpbyB7CiAgd2lkdGg6IDgwJTsKfQoudGFibGUtaGVhZGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAucmlnaHQgewogICAgZmxleDogMTsKICAgIHRleHQtYWxpZ246IHJpZ2h0OwogIH0KfQoudGFibGUtZm9vdGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIG1hcmdpbi10b3A6IDEwcHg7CiAgLnJpZ2h0IHsKICAgIGZsZXg6IDE7CiAgICB0ZXh0LWFsaWduOiByaWdodDsKICB9Cn0KLnNldC13cmFwIHsKICBtYXgtaGVpZ2h0OiA2MHZoOwogIG92ZXJmbG93OiBoaWRkZW47CiAgb3ZlcmZsb3cteTogYXV0bzsKfQoKLmF2YXRhci11cGxvYWRlciAuZWwtdXBsb2FkIHsKICBib3JkZXI6IDFweCBkYXNoZWQgI2Q5ZDlkOTsKICBib3JkZXItcmFkaXVzOiA2cHg7CiAgY3Vyc29yOiBwb2ludGVyOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBvdmVyZmxvdzogaGlkZGVuOwp9Ci5hdmF0YXItdXBsb2FkZXIgLmVsLXVwbG9hZDpob3ZlciB7CiAgYm9yZGVyLWNvbG9yOiAjMjBhMGZmOwp9Ci5hdmF0YXItdXBsb2FkZXItaWNvbiB7CiAgZm9udC1zaXplOiAyOHB4OwogIGNvbG9yOiAjOGM5MzlkOwogIHdpZHRoOiAxMjBweDsKICBoZWlnaHQ6IDEyMHB4OwogIGxpbmUtaGVpZ2h0OiAxMjBweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KLmF2YXRhciB7CiAgd2lkdGg6IDE0NXB4OwogIGhlaWdodDogMTQ1cHg7CiAgZGlzcGxheTogYmxvY2s7Cn0KCi5lbC10YWJsZV9fcm93IGF1ZGlvIHsKICB3aWR0aDogODAlOwp9CgoucHJvcGVydHktZ3JvdXAgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKICBtYXJnaW4tYm90dG9tOiAxNXB4OwogIC5wcm9wZXJ0eSB7CiAgICBmbGV4OiAxOwogIH0KICAubGVmdCB7CiAgICBwYWRkaW5nLXJpZ2h0OiA0MHB4OwogIH0KfQouZWwtdXBsb2FkIGF1ZGlvIHsKICB3aWR0aDogMzAwcHg7Cn0K"},{"version":3,"sources":["blindBoxSet.vue"],"names":[],"mappingssmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"blindBoxSet.vue","sourceRoot":"src/views/blindBoxManagement","sourcesContent":["<template>\n  <div class=\"set-wrap\">\n    <div class=\"table-container\" v-if=\"tab != 'config'\" :key=\"'nfts'\">\n      <div class=\"table-header\">\n        <div class=\"left\">\n          <span class=\"bfont mr-10\" :class=\"!box.isRepetition ? 'cblue' : 'cgreen' \">\n            {{ !box.isRepetition ? $t('blind.box.unRepeat') : $t('blind.box.isRepeat') }}</span>\n          <template v-if=\"!box.isRepetition\">\n            <span class=\"bfont mr-10\" :class=\"!repeatTip.max ? 'cred' : 'cgreen'\">\n              {{ $t('blind.box.amount') }} &le; {{ box.amount }}</span>\n            <span class=\"bfont mr-10\" :class=\"!repeatTip.typeAmount ? 'cred' : 'cgreen'\">\n              {{ $t('blind.box.NFTTypes') }} &ge; {{ box.nftAmount}}</span>\n          </template>\n          <span class=\"bfont mr-10\" :class=\"box.amount * box.nftAmount != useAmount ? 'cred' : 'cgreen'\">\n            {{$t('blind.box.totalAmount')}}:{{ box.amount * box.nftAmount}}({{ useAmount }})\n          </span>\n          <span class=\"cgreen bfont mr-10\" v-if=\"useAmount == box.amount * box.nftAmount\">{{$t('blind.box.success')}}</span>\n        </div>\n        <div class=\"right\">\n          <el-button @click=\"goConfig\" size=\"mini\" type=\"primary\">\n            {{ $t(\"blind.set.select\") }}\n          </el-button>\n        </div>\n      </div>\n      <el-table class=\"table-body\" v-loading=\"nftsLoading\" :data=\"nfts\" :element-loading-text=\"$t('util.loadingText')\" border tooltip-effect=\"dark\" style=\"width: 100%\">\n        <el-table-column align=\"center\" label=\"ID\" prop=\"id\" sortable></el-table-column>\n        <el-table-column align=\"center\" :label=\"$t('blind.nft.name')\">\n          <template slot-scope=\"scope\" v-if=\"scope.row.metadataContent.name\">\n            {{scope.row.metadataContent.name}}\n          </template>\n        </el-table-column>\n\n        <el-table-column align=\"center\" :label=\"$t('blind.nft.property')\">\n          <template slot-scope=\"scope\" v-if=\"scope.row.metadataContent.attributes\">\n            <div v-for=\"(attribute, i) in scope.row.metadataContent.attributes\" :key=\"i\">\n              {{ attribute.key}}: {{ attribute.value }}\n            </div>\n          </template>\n        </el-table-column>\n\n        <el-table-column align=\"center\" :label=\"$t('blind.set.picture')\" prop=\"metadataContent\" width=\"200px\">\n          <template slot-scope=\"scope\" v-if=\"scope.row.metadataContent.image\">\n            <media :isPreview=\"true\" :url=\"scope.row.metadataContent.image\" type=\"image\"></media>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" :label=\"$t('blind.set.audioORvideo')\" prop=\"metadataContent\">\n          <template slot-scope=\"scope\" v-if=\"scope.row.metadataContent.animation_url\">\n            <media :url=\"scope.row.metadataContent.animation_url\" :isPreview=\"true\"></media>\n          </template>\n        </el-table-column>\n        <el-table-column :label=\"$t('blind.set.amount')\" width=\"120px\">\n          <template slot-scope=\"scope\">\n            <el-input @input=\"(e) => { onInput(scope, e) }\" type=\"number\" v-model=\"scope.row.amount\" :min=\"1\"></el-input>\n          </template>\n        </el-table-column>\n        <el-table-column :label=\"$t('blind.box.probability')\" width=\"100\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <span class=\"cred bfont\" v-if=\"useAmount != box.amount * box.nftAmount\"> - </span>\n            <span class=\"cgreen bfont\" v-else>{{ getProbability(scope.row) }}%</span>\n          </template>\n        </el-table-column>\n\n        <el-table-column :label=\"$t('blind.operation')\">\n          <template slot-scope=\"scope\">\n            <el-button type=\"danger\" size=\"mini\" @click=\"delNFT(scope.$index)\">{{ $t(\"blind.delete\") }}</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      <div class=\"table-footer\">\n        <div class=\"left\">\n          <span class=\"cred bfont\" v-if=\"error\"> {{ error}} </span>\n        </div>\n        <div class=\"right\">\n          <el-button :loading=\"apiLoading\" @click=\"addData\" type=\"primary\">{{ $t(\"blind.confirm\") }}</el-button>\n        </div>\n\n      </div>\n    </div>\n    <div class=\"table-container\" v-else :key=\"'config'\">\n      <div class=\"table-header\">\n        <div class=\"left\">\n          <el-button type=\"text\" @click=\"goNfts\">\n            {{ $t(\"blind.set.back\") }}\n          </el-button>\n        </div>\n        <div class=\"right\">\n          <el-button size=\"mini\" type=\"primary\" @click=\"dialogVisible = true\">\n            {{ $t(\"blind.box.addNFT\") }}\n          </el-button>\n        </div>\n      </div>\n      <el-table class=\"table-body\" ref=\"multipleTable\" v-loading=\"listLoading\" :data=\"list\" :element-loading-text=\"$t('util.loadingText')\" border tooltip-effect=\"dark\" style=\"width: 100%\"\n        @selection-change=\"handleSelectionChange\">\n        <el-table-column type=\"selection\" width=\"55\"> </el-table-column>\n        <el-table-column align=\"center\" label=\"ID\" prop=\"id\" sortable></el-table-column>\n\n        <el-table-column align=\"center\" :label=\"$t('blind.nft.name')\">\n          <template slot-scope=\"scope\" v-if=\"scope.row.metadataContent.name\">\n            {{scope.row.metadataContent.name}}\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" :label=\"$t('blind.nft.property')\">\n          <template slot-scope=\"scope\" v-if=\"scope.row.metadataContent.attributes\">\n            <div v-for=\"(attribute, i) in scope.row.metadataContent.attributes\" :key=\"i\">\n              {{ attribute.key}}: {{ attribute.value }}\n            </div>\n          </template>\n        </el-table-column>\n\n        <el-table-column align=\"center\" :label=\"$t('blind.set.picture')\" prop=\"metadataContent\" width=\"200px\">\n          <template slot-scope=\"scope\" v-if=\"scope.row.metadataContent.image\">\n            <media :isPreview=\"true\" :url=\"scope.row.metadataContent.image\" type=\"image\"></media>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" :label=\"$t('blind.set.audioORvideo')\" prop=\"metadataContent\" width=\"200px\">\n          <template slot-scope=\"scope\" v-if=\"scope.row.metadataContent.animation_url\">\n            <media :url=\"scope.row.metadataContent.animation_url\" :isPreview=\"true\"></media>\n          </template>\n        </el-table-column>\n      </el-table>\n      <div class=\"table-footer\">\n        <div class=\"right\">\n          <el-button @click=\"selNFTs\" type=\"primary\">\n            {{ $t(\"blind.confirm\") }}\n          </el-button>\n        </div>\n      </div>\n    </div>\n    <el-dialog :title=\"$t('blind.add')\" :visible.sync=\"dialogVisible\" @open=\"onOpen\" append-to-body>\n      <el-form ref=\"formData\" :model=\"formData\" status-icon label-position=\"left\" label-width=\"120px\" :rules=\"rules\">\n        <el-form-item :label=\"$t('blind.nft.blindType')\" prop=\"address\">\n          <el-select disabled v-model=\"formData.address\" :placeholder=\"$t('blind.nft.pleaseSelect')\">\n            <el-option v-for=\"(blindType, index) in blindTypes\" :key=\"index\" :label=\"blindType.name\" :value=\"blindType.address\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item :label=\"$t('blind.nft.name')\" prop=\"name\">\n          <el-input v-model=\"formData.name\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('blind.nft.brief')\" prop=\"description\">\n          <el-input type=\"textarea\" v-model=\"formData.description\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('blind.nft.picture')\" prop=\"imgUrl\">\n          <el-upload ref=\"upload\" action=\"\" :auto-upload=\"false\" :show-file-list=\"false\" :file-list=\"fileListImage\" :limit=\"1\" class=\"avatar-uploader\"\n            accept=\"image/jpg, image/jpeg, image/png, image/gif\" :on-change=\"(file) => { uploadChange(file, 'uploadImage'); }\">\n            <template v-if=\"formData.imgUrl\">\n              <media :url=\"formData.imgUrl\" type=\"image\"></media>\n            </template>\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n          </el-upload>\n        </el-form-item>\n        <el-form-item :label=\"$t('blind.nft.audioORvideo')\" prop=\"animUrl\">\n          <el-upload ref=\"upload\" action=\"\"\n              :auto-upload=\"false\"\n              :show-file-list=\"false\"\n              :file-list=\"fileListVideo\"\n              :limit=\"1\"\n              class=\"avatar-uploader\"\n              accept=\"audio/mp3, audio/wav, audio/oga, video/webm, video/mp4, video/m4v, video/ogg, video/ogv, video/mov\"\n              :on-change=\" (file) => { uploadChange(file, 'uploadVideo'); }\"\n              >\n            <template v-if=\"formData.animUrl\">\n              <media :url=\"formData.animUrl\" :type=\"formData.animType\"></media>\n            </template>\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n          </el-upload>\n        </el-form-item>\n        <el-form-item :label=\"$t('blind.nft.property')\">\n          <div class=\"property-group\" v-for=\"(property, i) in formData.properties\" :key=\"i\">\n            <div class=\"property left\">\n              <el-input v-model=\"property.key\" :placeholder=\"$t('blind.property.key')\" @input=\"propertyInput\"> </el-input>\n            </div>\n            <div class=\"property right\">\n              <el-input v-model=\"property.value\" :placeholder=\"$t('blind.property.value')\" @input=\"propertyInput\"> </el-input>\n            </div>\n          </div>\n        </el-form-item>\n      </el-form>\n\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click.native.prevent=\"dialogVisible=false\">\n          {{ $t(\"blind.cancel\") }}\n        </el-button>\n        <el-button :loading=\"apiLoading\" type=\"primary\" @click.native.prevent=\"addForm\">{{ $t(\"blind.confirm\") }}\n        </el-button>\n      </div>\n\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import Media from \"@/components/Media\";\n  export default {\n    name: \"nftSet\",\n    components: { Media },\n    data () {\n      return {\n        tab: \"nfts\",\n        listLoading: true,\n        list: [],\n        nftsLoading: true,\n        nfts: [],\n        multipleSelection: [],\n        apiLoading: false,\n        error: \"\",\n        dialogVisible: false,\n        formData: {\n          address: \"\",\n          name: \"\",\n          description: \"\",\n          storageId: \"\",\n          imgUrl: \"\",\n          animStorageId: \"\",\n          animUrl: \"\",\n          animType: \"\",\n          properties: [{ key: \"\", value: \"\" }],\n        },\n        rules: {\n          address: {\n            required: true,\n            message: this.$t(\"blind.nft.emptyType\"),\n            trigger: \"change\",\n          },\n          imgUrl: {\n            required: true,\n            message: this.$t(\"blind.nft.emptyPicture\"),\n            trigger: \"blur\",\n          },\n        },\n        fileImage: \"\",\n        fileVideo: \"\",\n        fileListImage: [],\n        fileListVideo: [],\n      };\n    },\n    props: [\"box\"],\n    computed: {\n      useAmount () {\n        let amount = 0;\n        for (var i = 0;i < this.nfts.length;i++) {\n          var _amount = parseInt(this.nfts[i].amount)\n          amount += !_amount ? 0 : _amount;\n        }\n        return amount;\n      },\n      repeatTip () {\n        if (this.box.isRepetition) return;\n        let max = 0;\n        let typeAmount = this.nfts.length;\n        for (var i = 0;i < this.nfts.length;i++) {\n          var _amount = parseInt(this.nfts[i].amount)\n          max = _amount && _amount > max ? _amount : max;\n        }\n        return {\n          max: max <= parseInt(this.box.amount),\n          typeAmount: typeAmount >= parseInt(this.box.nftAmount)\n        }\n      },\n      blindTypes () {\n        return this.$store.state.user.blindTypes;\n      },\n    },\n    created () {\n      this.getNfts();\n    },\n    methods: {\n      getProbability (nft) {\n        let amount = parseInt(nft.amount)\n        if (!amount) return 0;\n        if (!this.box.isRepetition) {\n          return this.$tool.decimal((amount * 100) / this.box.amount, 2);\n        }\n        let totalAmount = this.box.amount * this.box.nftAmount;\n        let probability = 0;\n        for (var i = 0;i < this.box.nftAmount;i++) {\n          if (!probability) {\n            probability = (totalAmount - amount - i) / totalAmount;\n          } else {\n            probability = probability * (totalAmount - amount - i) / totalAmount;\n          }\n        }\n        return this.$tool.decimal((1 - probability) * 100, 2);\n      },\n      onInput (scope, e) {\n        this.nfts = [].concat(this.nfts);\n      },\n      getNfts () {\n        this.nftsLoading = true;\n        this.$api(\"blind.box.nfts\", { blindBoxId: this.box.id })\n          .then((res) => {\n            if (this.$tool.checkResponse(res)) {\n              for (var i = 0;i < res.data.list.length;i++) {\n                let nft = res.data.list[i];\n                nft.metadataContent = JSON.parse(\n                  nft.metadataContent\n                );\n                this.nfts.push(Object.assign({}, nft));\n              }\n            }\n            this.nftsLoading = false;\n          })\n          .catch(() => {\n            this.nftsLoading = false;\n          });\n      },\n      getList () {\n        this.listLoading = true;\n        this.$api(\"blind.nft.all\", { address: this.box.address })\n          .then((res) => {\n            if (this.$tool.checkResponse(res)) {\n              this.formatData(res.data.list);\n              this.list = res.data.list;\n              this.checkSelected();\n            }\n            this.listLoading = false;\n          })\n          .catch((err) => {\n            this.listLoading = false;\n          });\n      },\n      checkForm () {\n        let error = false\n        let total = this.box.amount * this.box.nftAmount;\n        if (total < this.useAmount) {\n          this.error = this.$t('blind.box.limitTotalAmount') + total;\n          error = true;\n        }\n        if (!this.box.isRepetition && !this.repeatTip.max) {\n          this.error = this.$t('blind.box.limitMaxAmount') + this.box.amount;\n          error = true;\n        }\n\n        return !error;\n      },\n      addData () {\n        if (!this.checkForm()) return;\n\n        if (this.apiLoading) return;\n        this.apiLoading = true;\n\n        let nfts = [];\n        for (var i = 0;i < this.nfts.length;i++) {\n          var nft = this.nfts[i];\n          nfts.push({\n            blindNftId: this.nfts[i].id,\n            amount: this.nfts[i].amount,\n            blindBoxId: this.box.id,\n            ...nft\n          });\n        }\n        nfts = JSON.stringify(nfts);\n        let data = {\n          blindBoxId: this.box.id,\n          nfts: nfts,\n        };\n        this.$api(\"blind.box.addNfts\", data)\n          .then((res) => {\n            this.apiLoading = false;\n            if (this.$tool.checkResponse(res)) {\n              this.$notify.success({\n                title: this.$t(\"blind.success\"),\n                message: this.$t(\"blind.messageSuccess\"),\n              });\n              this.$emit(\"confirm\");\n            }\n          })\n          .catch((err) => {\n            this.apiLoading = false;\n            this.$notify.error({\n              title: this.$t(\"blind.fail\"),\n              message: this.$t(\"response.\" + err.data ? err.data.errno : \"\"),\n            });\n          });\n      },\n      goNfts () {\n        this.tab = \"nfts\";\n      },\n      goConfig () {\n        this.error = \"\";\n        this.tab = \"config\";\n        this.getList();\n      },\n      handleSelectionChange (val) {\n        this.multipleSelection = val;\n      },\n      selNFTs () {\n        this.nfts = this.multipleSelection;\n        var nfts = [];\n        console.log(\"this.nfts\", this.nfts);\n        for(var i = 0; i < this.nfts.length; i++){\n          console.log(\"i\", i);\n          var nft = Object.assign({}, this.nfts[i]);\n          nft.amount = 1;\n          nfts.push(nft);\n        }\n        this.nfts = nfts;\n        this.goNfts();\n      },\n      delNFT (index) {\n        this.nfts.splice(index, 1);\n        this.nfts = [].concat(this.nfts);\n      },\n      onOpen () {\n        this.formData = {\n          address: this.box.address,\n          name: \"\",\n          description: \"\",\n          imgUrl: \"\",\n          storageId: \"\",\n          animUrl: \"\",\n          animStorageId: \"\",\n          properties: [{ key: \"\", value: \"\" }],\n        };\n        this.fileImage = \"\";\n        this.fileVideo = \"\";\n      },\n      formatData (data) {\n        for (let i = 0, len = data.length;i < len;i++) {\n          data[i].metadataContent = JSON.parse(data[i].metadataContent);\n        }\n      },\n      checkSelected () {\n        this.$nextTick(function () {\n          for (var i = 0;i < this.list.length;i++) {\n            let row = this.list[i];\n            if (!this.existsNFT(row.id)) {\n              this.$refs.multipleTable.toggleRowSelection(row, false);\n            } else {\n              this.$refs.multipleTable.toggleRowSelection(row, true);\n            }\n          }\n        });\n      },\n      existsNFT (id) {\n        for (var i = 0;i < this.nfts.length;i++) {\n          let nft = this.nfts[i];\n          if (nft.blindNftId == id) return true;\n        }\n        return false;\n      },\n      propertyInput (e) {\n        let emptyC = 0;\n        for (var i = 0;i < this.formData.properties.length;i++) {\n          var property = this.formData.properties[i];\n          if (!property.key || !property.value) emptyC += 1;\n        }\n        if (emptyC != 1) {\n          this.formData.properties = this.formData.properties.filter(function (\n            property\n          ) {\n            return property.key || property.value;\n          });\n          this.formData.properties.push({ key: \"\", value: \"\" });\n        }\n        this.formData = JSON.parse(JSON.stringify(this.formData));\n      },\n      fullProperties (properties) {\n        var _properties = [];\n        for (var i = 0;i < properties.length;i++) {\n          var key = properties[i].key.trim();\n          var value = properties[i].value.trim();\n          if (!key || !value) continue;\n          var trait_type = key;\n          _properties.push({ key, value, trait_type });\n        }\n        return _properties;\n      },\n      uploadChange (files, uploadType) {\n        if (uploadType === \"uploadImage\") {\n          this.fileListImage = [];\n          this.fileImage = files.raw;\n        }\n        if (uploadType === \"uploadVideo\") {\n          this.fileListVideo = [];\n          this.fileVideo = files.raw;\n        }\n        var event = event || window.event;\n        var file = event.target.files[0];\n        var reader = new FileReader();\n        var _this = this;\n        reader.onload = function (e) {\n          if (uploadType === \"uploadImage\") {\n            _this.formData.imgUrl = e.target.result;\n          }\n          if (uploadType === \"uploadVideo\") {\n            _this.formData.animUrl = e.target.result;\n            _this.formData.animType = file.type;\n            console.log(\"animType\", file.type);\n          }\n        };\n        reader.readAsDataURL(file);\n      },\n      handlerUploadImage () {\n        return new Promise((resolve, reject) => {\n          let formData = new FormData();\n          formData.append(\"file\", this.fileImage);\n          formData.append(\"flag\", \"ipfs\");\n          this.$api(\"storage.create\", formData)\n            .then((res) => {\n              if (this.$tool.checkResponse(res)) {\n                resolve(res.data);\n              } else {\n                reject(res);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        });\n      },\n      handlerUploadVideo () {\n        return new Promise((resolve, reject) => {\n          let formData = new FormData();\n          formData.append(\"files\", this.fileVideo);\n          formData.append(\"files\", this.fileImage);\n          this.$api(\"storage.multiupload\", formData)\n            .then((res) => {\n              if (this.$tool.checkResponse(res)) {\n                resolve(res.data);\n              } else {\n                reject(res);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        });\n      },\n      addForm () {\n        this.$refs[\"formData\"].validate((valid) => {\n          if (valid && !this.apiLoading) {\n            this.apiLoading = true;\n            let promiseArr = [];\n            if (this.fileVideo) {\n              promiseArr = [this.handlerUploadVideo()];\n            } else {\n              promiseArr = [this.handlerUploadImage()];\n            }\n            Promise.all(promiseArr)\n              .then((res) => {\n                this.addNFT(res);\n              })\n              .catch((err) => {\n                this.failCallback();\n              });\n          }\n        });\n      },\n      addNFT (fileData) {\n        let {\n          address,\n          name,\n          description,\n          storageId,\n          imgUrl,\n          animStorageId,\n          animUrl,\n          properties,\n        } = this.formData;\n        if (fileData) {\n          storageId = this.fileVideo ? fileData[0][1].id : fileData[0].id;\n          imgUrl = this.fileVideo\n            ? fileData[0][1].ipfshash\n            : fileData[0].ipfshash;\n          animStorageId = this.fileVideo ? fileData[0][0].id : \"\";\n          animUrl = this.fileVideo ? fileData[0][0].ipfshash : \"\";\n        } else {\n          storageId = imgUrl = animStorageId = animUrl = \"\";\n        }\n        let propertys = this.fullProperties(properties);\n        propertys = JSON.stringify(propertys);\n        let sendData = {\n          address,\n          name,\n          description,\n          type: 5,\n          storageId,\n          imgUrl,\n          animStorageId,\n          animUrl,\n          propertys,\n        };\n        this.$api(\"blind.nft.add\", sendData)\n          .then((res) => {\n            this.apiLoading = false;\n            if (this.$tool.checkResponse(res)) {\n              this.$notify.success({\n                title: this.$t(\"blind.success\"),\n                message: this.$t(\"blind.messageSuccess\"),\n              });\n              this.dialogVisible = false;\n              this.getList();\n            }\n          })\n          .catch((err) => {\n            this.failCallback(err);\n          });\n      },\n      failCallback (err) {\n        this.apiLoading = false;\n        this.$notify.error({\n          title: this.$t(\"blind.fail\"),\n          message: err\n            ? this.$t(\"response.\" + err.data ? err.data.errno : \"\")\n            : this.$t(\"blind.messageFail\"),\n        });\n        this.dialogVisible = false;\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  .table-container {\n    position: relative;\n    height: 60vh;\n    .table-body {\n      position: absolute;\n      top: 35px;\n      left: 0;\n      right: 0;\n      bottom: 50px;\n      overflow-y: scroll;\n    }\n    .table-footer {\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n  }\n\n  .el-table__row audio {\n    width: 80%;\n  }\n  .table-header {\n    display: flex;\n    margin-bottom: 10px;\n    align-items: center;\n    .right {\n      flex: 1;\n      text-align: right;\n    }\n  }\n  .table-footer {\n    display: flex;\n    margin-top: 10px;\n    .right {\n      flex: 1;\n      text-align: right;\n    }\n  }\n  .set-wrap {\n    max-height: 60vh;\n    overflow: hidden;\n    overflow-y: auto;\n  }\n\n  .avatar-uploader .el-upload {\n    border: 1px dashed #d9d9d9;\n    border-radius: 6px;\n    cursor: pointer;\n    position: relative;\n    overflow: hidden;\n  }\n  .avatar-uploader .el-upload:hover {\n    border-color: #20a0ff;\n  }\n  .avatar-uploader-icon {\n    font-size: 28px;\n    color: #8c939d;\n    width: 120px;\n    height: 120px;\n    line-height: 120px;\n    text-align: center;\n  }\n  .avatar {\n    width: 145px;\n    height: 145px;\n    display: block;\n  }\n\n  .el-table__row audio {\n    width: 80%;\n  }\n\n  .property-group {\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 15px;\n    .property {\n      flex: 1;\n    }\n    .left {\n      padding-right: 40px;\n    }\n  }\n  .el-upload audio {\n    width: 300px;\n  }\n</style>\n"]}]}