{"remainingRequest":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\src\\views\\blindBoxManagement\\blindBox.vue?vue&type=style&index=0&id=7f295242&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\src\\views\\blindBoxManagement\\blindBox.vue","mtime":1650964597000},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":1652081880732},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1652081880145},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\postcss-loader\\src\\index.js","mtime":1652081880241},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1652081887366},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652081880827},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1652081880134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hdmF0YXItdXBsb2FkZXIgLmVsLXVwbG9hZCB7CiAgYm9yZGVyOiAxcHggZGFzaGVkICNkOWQ5ZDk7CiAgYm9yZGVyLXJhZGl1czogNnB4OwogIGN1cnNvcjogcG9pbnRlcjsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKfQouYXZhdGFyLXVwbG9hZGVyIC5lbC11cGxvYWQ6aG92ZXIgewogIGJvcmRlci1jb2xvcjogIzIwYTBmZjsKfQouYXZhdGFyLXVwbG9hZGVyLWljb24gewogIGZvbnQtc2l6ZTogMjhweDsKICBjb2xvcjogIzhjOTM5ZDsKICB3aWR0aDogMTIwcHg7CiAgaGVpZ2h0OiAxMjBweDsKICBsaW5lLWhlaWdodDogMTIwcHg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9Ci5hdmF0YXIgewogIHdpZHRoOiAxNDVweDsKICBoZWlnaHQ6IDE0NXB4OwogIGRpc3BsYXk6IGJsb2NrOwp9CgoucHJvcGVydHktZ3JvdXAgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKICBtYXJnaW4tYm90dG9tOiAxNXB4OwogIC5wcm9wZXJ0eSB7CiAgICBmbGV4OiAxOwogIH0KICAubGVmdCB7CiAgICBwYWRkaW5nLXJpZ2h0OiA0MHB4OwogIH0KfQouZm9ybS10aXAgewogIGZvbnQtd2VpZ2h0OiBib2xkOwogIHBhZGRpbmc6IDAgMCAxMHB4IDEyMHB4Owp9Cg=="},{"version":3,"sources":["blindBox.vue"],"names":[],"mappingsq1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"blindBox.vue","sourceRoot":"src/views/blindBoxManagement","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input v-model=\"listQuery.blindTypeName\" clearable class=\"filter-item w-200 mr-10\" :placeholder=\"$t('blind.placeholder')\" />\n      <el-select v-model=\"listQuery.sync\" class=\"filter-item w-200 mr-10\" :placeholder=\"$t('blind.box.pleaseSelectSync')\" :clearable=\"true\">\n        <el-option v-for=\"item in syncOptions\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\" />\n      </el-select>\n      <el-button class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handlerFilter\">{{ $t(\"blind.select\") }}</el-button>\n      <el-button class=\"filter-item\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handlerBtn('add')\" v-permission=\"['POST /admin/blind/box/add']\">{{ $t(\"blind.add\") }}</el-button>\n    </div>\n\n    <el-table v-loading=\"listLoading\" :data=\"list\" :element-loading-text=\"$t('util.loadingText')\" border>\n      <el-table-column type=\"expand\">\n        <template slot-scope=\"props\">\n          <el-form label-position=\"left\" inline class=\"table-expand\" label-width=\"160px\">\n            <el-form-item :label=\"$t('blind.box.blindType')\">\n              <span>{{ tableBlindType(props.row.address) }}</span>\n            </el-form-item>\n            <el-form-item label=\"payToken\">\n              <span>{{ props.row.payToken }}</span>\n            </el-form-item>\n            <el-form-item label=\"payTokenId\">\n              <span>{{ props.row.payTokenId }}</span>\n            </el-form-item>\n            <el-form-item :label=\"$t('blind.box.times')\">\n              <span>{{ tableTime(props.row.startTime, props.row.endTime) }}</span>\n            </el-form-item>\n            <el-form-item :label=\"$t('blind.box.anim1')\" v-if=\"props.row.anim1\">\n              <media :url=\"props.row.anim1\" type=\"image\" :isPreview=\"true\"></media>\n            </el-form-item>\n            <el-form-item :label=\"$t('blind.box.anim2')\" v-if=\"props.row.anim2\">\n              <media :url=\"props.row.anim2\" type=\"image\" :isPreview=\"true\"></media>\n            </el-form-item>\n\n            <el-form-item :label=\"$t('blind.box.salt')\">\n              <span>{{ props.row.salt }}</span>\n            </el-form-item>\n          </el-form>\n        </template>\n      </el-table-column>\n\n      <el-table-column prop=\"id\" label=\"ID\" sortable> </el-table-column>\n      <el-table-column prop=\"name\" :label=\"$t('blind.box.name')\">\n      </el-table-column>\n      <el-table-column prop=\"amount\" :label=\"$t('blind.box.amount')\">\n      </el-table-column>\n      <el-table-column prop=\"nftAmount\" :label=\"$t('blind.box.NFTAmount')\">\n      </el-table-column>\n      <el-table-column :label=\"$t('blind.box.NFTListInfo')\" align=\"center\" width=\"200\">\n        <template slot-scope=\"scope\">\n          <div class=\"bfont\" :class=\"!scope.row.isRepetition ? 'cblue' : 'cgreen' \">\n            {{ !scope.row.isRepetition? $t('blind.box.unRepeat') : $t('blind.box.isRepeat') }}\n          </div>\n\n          <div class=\"bfont\" :class=\"scope.row.amount * scope.row.nftAmount != scope.row.usedAmount ? 'cred' : 'cgreen' \">\n            {{$t('blind.box.totalAmount')}}: {{ scope.row.amount * scope.row.nftAmount }}({{ scope.row.usedAmount }})\n          </div>\n          <div class=\"cgreen bfont\" v-if=\"scope.row.amount * scope.row.nftAmount == scope.row.usedAmount\">\n            {{$t('blind.box.success')}}\n          </div>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"price\" :label=\"$t('blind.box.price')\">\n      </el-table-column>\n      <el-table-column width=\"150\" prop=\"imgUrl\" :label=\"$t('blind.box.picture')\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <media :url=\"scope.row.imgUrl\" type=\"image\" :isPreview=\"true\"></media>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"status\" :label=\"$t('blind.status')\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-tag type=\"success\" v-if=\"scope.row.sync\">\n            {{ $t(\"blind.sign\") }}\n          </el-tag>\n          <el-tag type=\"info\" v-else>{{ $t(\"blind.unsign\") }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column align=\"center\" :label=\"$t('blind.operation')\" width=\"300\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"scope\">\n          <el-button type=\"success\" size=\"mini\" @click=\"handlerBtn('set', scope.row)\" v-permission=\"['POST /admin/blind/box/addNfts']\">{{ $t(\"blind.box.config\") }}</el-button>\n          <el-button type=\"primary\" size=\"mini\" @click=\"handlerBtn('edit', scope.row)\" v-permission=\"['POST /admin/blind/box/edit']\">{{ $t(\"blind.edit\") }}</el-button>\n\n          <el-button type=\"primary\" size=\"mini\" @click=\"handlerBtn('sign', scope.row)\" v-permission=\"['POST /admin/blind/box/sign']\">{{ $t(\"blind.box.sign\") }}</el-button>\n\n          <el-button type=\"danger\" size=\"mini\" @click=\"handlerBtn('del', scope.row)\" v-permission=\"['POST /admin/blind/box/deleted']\">{{ $t(\"blind.delete\") }}</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"total > 0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getList\" />\n\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogFormVisible\" :width=\"dialogStatus === 'del' || dialogStatus === 'sync' ? '30%' : '50%'\" @closed=\"callbackCloseDialog\">\n      <template v-if=\"dialogStatus === 'add' || dialogStatus === 'edit'\">\n        <el-form ref=\"formData\" :model=\"formData\" status-icon label-position=\"left\" label-width=\"120px\" :rules=\"rules\">\n          <el-form-item :label=\"$t('blind.box.blindType')\" prop=\"address\">\n            <el-select v-model=\"formData.address\" :placeholder=\"$t('blind.box.pleaseSelect')\">\n              <el-option v-for=\"(blindType, index) in blindTypes\" :key=\"index\" :label=\"blindType.name\" :value=\"blindType.address\">\n              </el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item :label=\"$t('blind.box.name')\" prop=\"name\">\n            <el-input v-model=\"formData.name\"></el-input>\n          </el-form-item>\n          <el-form-item :label=\"$t('blind.box.brief')\" prop=\"describe\">\n            <el-input type=\"textarea\" v-model=\"formData.describe\"></el-input>\n          </el-form-item>\n\n          <el-form-item :label=\"$t('blind.box.times')\" prop=\"times\">\n            <el-date-picker v-model=\"formData.times\" type=\"datetimerange\" :range-separator=\"$t('blind.time.to')\" :start-placeholder=\"$t('blind.time.start')\" :end-placeholder=\"$t('blind.time.end')\" picker-options=\"pickerOptions\">\n            </el-date-picker>\n          </el-form-item>\n\n          <el-form-item :label=\"$t('blind.box.repetition')\" prop=\"isRepetition\">\n            <el-switch v-model=\"formData.isRepetition\"></el-switch>\n          </el-form-item>\n\n          <el-form-item :label=\"$t('blind.box.amount')\" prop=\"amount\">\n            <el-input-number v-model=\"formData.amount\"></el-input-number>\n          </el-form-item>\n          <el-form-item :label=\"$t('blind.box.NFTAmount')\" prop=\"nftAmount\">\n            <el-input-number v-model=\"formData.nftAmount\"></el-input-number>\n          </el-form-item>\n          <div class=\"form-tip\">{{ $t('blind.box.totalAmount') }} :\n            <span class=\"cblue\"> {{ totalAmount }}</span>\n          </div>\n          <el-form-item :label=\"$t('blind.box.price')\" prop=\"price\">\n            <el-input-number v-model=\"formData.price\" :controls=\"false\"></el-input-number>\n          </el-form-item>\n          <el-form-item :label=\"$t('blind.box.address')\" prop=\"paytokenId\">\n            <el-select v-model=\"formData.paytokenId\" :placeholder=\"$t('blind.box.pleaseSelect')\">\n              <el-option v-for=\"(paytoken, index) in paytokens\" :key=\"index\" :label=\"paytoken.symbol\" :value=\"paytoken.id\">\n              </el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item :label=\"$t('blind.box.picture')\" prop=\"imgUrl\">\n            <el-upload ref=\"upload\" action=\"\" :auto-upload=\"false\" :show-file-list=\"false\" :file-list=\"filelist\" :limit=\"1\" class=\"avatar-uploader\" accept=\"image/jpg, image/jpeg, image/png, image/gif\" :on-change=\" (file) => { uploadChange(file, 'cover'); }\">\n              <template v-if=\"formData.imgUrl\">\n                <media :url=\"formData.imgUrl\" type=\"image\"></media>\n              </template>\n              <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n            </el-upload>\n          </el-form-item>\n          <el-form-item :label=\"$t('blind.box.openGif')\" prop=\"anim1\">\n            <el-upload ref=\"upload\" action=\"\" :auto-upload=\"false\" :show-file-list=\"false\" :file-list=\"anim1List\" :limit=\"1\" class=\"avatar-uploader\" accept=\"image/jpg, image/jpeg, image/png, image/gif\" :on-change=\" (file) => { uploadChange(file, 'open');}\">\n              <template v-if=\"formData.anim1\">\n                <media :url=\"formData.anim1\" type=\"image\"></media>\n              </template>\n              <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n            </el-upload>\n          </el-form-item>\n          <el-form-item :label=\"$t('blind.box.openedGif')\" prop=\"anim2\">\n            <el-upload ref=\"upload\" action=\"\" :auto-upload=\"false\" :show-file-list=\"false\" :file-list=\"anim2List\" :limit=\"1\" class=\"avatar-uploader\" accept=\"image/jpg, image/jpeg, image/png, image/gif\" :on-change=\" (file) => { uploadChange(file, 'opened');}\">\n              <template v-if=\"formData.anim2\">\n                <media :url=\"formData.anim2\" type=\"image\"></media>\n              </template>\n              <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n            </el-upload>\n          </el-form-item>\n        </el-form>\n      </template>\n      <!-- 删除 -->\n      <template v-if=\"dialogStatus === 'del'\">\n        <span>{{ $t(\"blind.deleteTip\") }}</span>\n      </template>\n      <template v-if=\"dialogStatus === 'sign'\">\n        <p class=\"mb-20\">\n          <span class=\"bfont\"> {{ $t('blind.box.signTip') }} </span>\n        </p>\n        <div class=\"error-tip text-center mb-10\" v-if=\"error\"> {{ error }} </div>\n        <div class=\"mb-20 text-center\">\n          <el-button type=\"warning\" v-if=\"!connected\" @click=\"connectWallet\"> {{ $t(\"global.connectWallet\") }}</el-button>\n          <el-button :loading=\"apiLoading\" type=\"primary\" v-else @click=\"prepareSign\"> {{ $t('blind.box.sign') }}</el-button>\n        </div>\n      </template>\n      <template v-if=\"dialogStatus === 'set'\">\n        <box-set ref=\"comSet\" :box=\"box\" @confirm=\"onConfirm\"></box-set>\n      </template>\n      <!-- 底部按钮 -->\n      <div slot=\"footer\" class=\"flex align-center\" v-if=\"dialogStatus != 'set' && dialogStatus != 'sign'\">\n        <div class=\"\" v-if=\"error\">\n          <span class=\"cred bfont\">{{ error }}</span>\n        </div>\n        <div class=\"flex1\">\n          <el-button @click=\"handlerCancel\">{{ $t(\"blind.cancel\") }}</el-button>\n          <el-button :loading=\"apiLoading\" type=\"primary\" @click.native.prevent=\"handlerConfirm\">{{ $t(\"blind.confirm\") }}</el-button>\n        </div>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import Pagination from \"@/components/Pagination\";\n  import boxSet from \"./blindBoxSet\";\n  import Media from \"@/components/Media\";\n  import web3 from '@/utils/web3/index';\n  export default {\n    name: \"blindBox\",\n    components: { Pagination, boxSet, Media },\n    data () {\n      var validatePrice = (rule, value, callback) => {\n        if (this.payType === 2) {\n          if (parseInt(value) !== parseFloat(value)) {\n            callback(new Error(this.$t(\"blind.box.integer\")));\n          } else {\n            callback();\n          }\n        } else {\n          callback();\n        }\n      };\n      return {\n        list: null,\n        total: 0,\n        listLoading: false,\n        apiLoading: false,\n        listQuery: {\n          page: 1,\n          limit: 10,\n          sort: \"create_time\",\n          order: \"desc\",\n          blindTypeName: undefined,\n          sync: undefined,\n        },\n        syncOptions: [\n          {\n            value: true,\n            label: this.$t(\"blind.sync\"),\n          },\n          {\n            value: false,\n            label: this.$t(\"blind.unsync\"),\n          },\n        ],\n        dialogFormVisible: false,\n        dialogStatus: \"\",\n        error: \"\",\n        formData: {\n          address: \"\",\n          name: \"\",\n          describe: \"\",\n          owner: \"\",\n          times: [],\n          isRepetition: false,\n          amount: \"\",\n          nftAmount: \"\",\n          price: \"\",\n          paytokenId: \"\",\n          imgId: \"\",\n          imgUrl: \"\",\n          anim1: \"\",\n          anim2: \"\",\n        },\n        paytokens: [],\n        rules: {\n          address: [\n            {\n              required: true,\n              message: this.$t(\"blind.box.emptyType\"),\n              trigger: \"blur\",\n            },\n          ],\n          name: [\n            {\n              required: true,\n              message: this.$t(\"blind.box.emptyName\"),\n              trigger: \"blur\",\n            },\n          ],\n          owner: [\n            {\n              required: true,\n              message: this.$t(\"blind.box.emptyOwner\"),\n              trigger: \"blur\",\n            },\n          ],\n          paytokenId: [\n            {\n              required: true,\n              message: this.$t(\"blind.box.emptyPayToken\"),\n              trigger: \"blur\",\n            },\n          ],\n          amount: [\n            {\n              required: true,\n              message: this.$t(\"blind.box.limitAmount\"),\n              trigger: \"blur\",\n            },\n          ],\n          nftAmount: [\n            {\n              required: true,\n              message: this.$t(\"blind.box.emptyOpenAmount\"),\n              trigger: \"blur\",\n            },\n          ],\n          price: [\n            {\n              required: true,\n              message: this.$t(\"blind.box.limitPrice\"),\n              trigger: \"blur\",\n            },\n            {\n              validator: validatePrice,\n              trigger: \"blur\",\n            },\n          ],\n          imgUrl: {\n            required: true,\n            message: this.$t(\"blind.box.emptyPicture\"),\n            trigger: \"change\",\n          },\n          times: {\n            required: true,\n            message: this.$t(\"blind.box.emptyTimes\"),\n            trigger: \"change\",\n          },\n        },\n        pickerOptions: {\n          disabledDate (time) {\n            return time.getTime() < Date.now() - 8.64e7;\n          }\n        },\n        deleteId: \"\",\n        box: null,\n        fileImage: \"\",\n        filelist: [],\n        anim1Image: \"\",\n        anim1List: [],\n        anim2Image: \"\",\n        anim2List: [],\n        // 授权\n        blindBoxId: \"\",\n      };\n    },\n    computed: {\n      dialogTitle () {\n        let dialogTitle = \"\";\n        switch (this.dialogStatus) {\n          case \"add\":\n            dialogTitle = this.$t(\"blind.add\");\n            break;\n          case \"edit\":\n            dialogTitle = this.$t(\"blind.edit\");\n            break;\n          case \"del\":\n            dialogTitle = this.$t(\"blind.delete\");\n            break;\n          default:\n            break;\n        }\n        return dialogTitle;\n      },\n      connected(){\n        return this.$store.state.network.connected;\n      },\n      web3(){\n        return this.$store.state.network.web3;\n      },\n      config () {\n        return this.$store.state.user.config;\n      },\n      blindTypes () {\n        return this.$store.state.user.blindTypes;\n      },\n      tableBlindType () {\n        return function (address) {\n          for (let i = 0, len = this.blindTypes.length;i < len;i++) {\n            if (this.blindTypes[i].address === address)\n              return this.blindTypes[i].name;\n          }\n        };\n      },\n      tableTime () {\n        return function (start, end) {\n          let activeDate = \"\";\n          if (start && end) {\n            let startDate = new Date(start * 1000),\n              startDate_date = startDate.toLocaleDateString(),\n              startDate_time = startDate.toTimeString().slice(0, 8),\n              endDate = new Date(end * 1000),\n              endDate_date = endDate.toLocaleDateString(),\n              endDate_time = endDate.toTimeString().slice(0, 8);\n            activeDate =\n              startDate_date +\n              \" \" +\n              startDate_time +\n              \"一\" +\n              endDate_date +\n              \" \" +\n              endDate_time;\n          }\n          return activeDate;\n        };\n      },\n      payType () {\n        for (let item of this.paytokens) {\n          if (item.id === this.formData.paytokenId) {\n            return item.type;\n          }\n        }\n        return null\n      },\n      totalAmount () {\n        if (!this.formData.nftAmount || !this.formData.amount) return 0;\n        let amount = parseInt(this.formData.nftAmount * this.formData.amount)\n        return !amount ? 0 : amount;\n      },\n    },\n    created () {\n      this.init();\n    },\n    methods: {\n      connectWallet(){\n        this.$store.dispatch(\"connect\");\n      },\n      onConfirm () {\n        this.dialogFormVisible = false;\n        this.getList();\n      },\n      init(){\n        this.paytokenList();\n        this.getList();\n      },\n      paytokenList(){\n        this.$api(\"blind.paytoken.list\").then(res => {\n          if(this.$tool.checkResponse(res)){\n            this.paytokens = res.data.list;\n          }\n        });\n      },\n      getList () {\n        this.listLoading = true;\n        this.$api(\"blind.box.list\", this.listQuery)\n          .then((res) => {\n            this.list = res.data.list;\n            this.getNftList();\n            this.total = res.data.total;\n            this.listLoading = false;\n          })\n          .catch(() => {\n            this.list = [];\n            this.total = 0;\n            this.listLoading = false;\n          });\n      },\n      getNftList(){\n        var boxList = [];\n        for(var i = 0; i < this.list.length; i++){\n          boxList.push(this.list[i].id);\n        }\n        boxList = boxList.join(\",\");\n        this.$api(\"blind.box.nftsbymulti\",  { boxList }).then(res => {\n          if(this.$tool.checkResponse(res)){\n            var nfts = res.data.list;\n            var amountDict = {};\n            for(var i = 0; i < nfts.length; i++){\n              var nft = nfts[i];\n              if(!amountDict[nft.blindBoxId]) amountDict[nft.blindBoxId] = 0;\n              amountDict[nft.blindBoxId] += nft.amount;\n            }\n            for(var i = 0; i < this.list.length; i++){\n              var usedAmount = amountDict[this.list[i].id];\n              this.list[i].usedAmount = usedAmount ? usedAmount : 0;\n            }\n            this.list = [].concat(this.list);\n          }\n        });\n      },\n      checkForm () {\n        let error = false;\n        let amount = parseInt(this.formData.amount);\n        if (!amount || amount < 1) {\n          this.error = this.$t('blind.box.limitAmount')\n          error = true;\n        }\n        let nftAmount = parseInt(this.formData.nftAmount);\n        if (!nftAmount || nftAmount < 1) {\n          this.error = this.$t('blind.box.limitOpenAmount')\n          error = true;\n        }\n        let price = parseFloat(this.formData.price);\n        if (!price || price < 0) {\n          this.error = this.$t('blind.box.limitPrice')\n          error = true;\n        }\n        if (!this.fileImage && !this.formData.imgId) {\n          this.error = this.$t('blind.box.emptyCover')\n          error = true;\n        }\n        return !error;\n      },\n      addBox (data) {\n        let {\n          address,\n          name,\n          describe,\n          owner,\n          times,\n          isRepetition,\n          amount,\n          nftAmount,\n          price,\n          paytokenId,\n          imgId,\n          imgUrl,\n          anim1,\n          anim2,\n        } = this.formData;\n        let startTime = !times[0] ? 0\n          : parseInt(new Date(times[0]).getTime() / 1000);\n        let endTime = !times[1] ? 0\n          : parseInt(new Date(times[1]).getTime() / 1000);\n        if (data.cover) {\n          imgId = data.cover.id;\n          imgUrl = data.cover.url;\n        }\n        if (data.anim1) anim1 = data.anim1.url;\n\n        if (data.anim2) anim2 = data.anim2.url;\n\n        let sendData = {\n          address,\n          name,\n          describe,\n          owner,\n          startTime,\n          endTime,\n          isRepetition,\n          amount,\n          nftAmount,\n          price,\n          paytokenId,\n          imgId,\n          imgUrl,\n          anim1,\n          anim2,\n        };\n        this.apiLoading = true;\n        this.$api(\"blind.box.add\", sendData)\n          .then((res) => {\n            this.apiLoading = false;\n            if (this.$tool.checkResponse(res)) {\n              this.successCallback();\n              this.getList();\n            }\n          })\n          .catch((err) => {\n            this.failCallback(err);\n          });\n      },\n      editBox (data) {\n        let { times, imgId, imgUrl, anim1, anim2 } = this.formData;\n        let startTime = !times[0] ? 0\n          : parseInt(new Date(times[0]).getTime() / 1000);\n        let endTime = !times[1] ? 0\n          : parseInt(new Date(times[1]).getTime() / 1000);\n        if (data.cover) {\n          imgId = data.cover.id;\n          imgUrl = data.cover.url;\n        }\n        if (data.anim1) {\n          anim1 = data.anim1.url;\n        }\n        if (data.anim2) {\n          anim2 = data.anim2.url;\n        }\n\n        let sendData = {\n          id: this.formData.id,\n          address: this.formData.address,\n          name: this.formData.name,\n          describe: this.formData.describe,\n          owner: this.formData.owner,\n          isRepetition: this.formData.isRepetition,\n          amount: this.formData.amount,\n          nftAmount: this.formData.nftAmount,\n          price: this.formData.price,\n          paytokenId: this.formData.paytokenId,\n          startTime,\n          endTime,\n          imgId,\n          imgUrl,\n          anim1,\n          anim2,\n        };\n        this.apiLoading = true;\n        this.$api(\"blind.box.edit\", sendData)\n          .then((res) => {\n            this.apiLoading = false;\n            if (this.$tool.checkResponse(res)) {\n              this.successCallback();\n              this.getList();\n            }\n          })\n          .catch((err) => {\n            this.failCallback(err);\n          });\n      },\n      delBox () {\n        this.apiLoading = true;\n        this.$api(\"blind.box.deleted\", { id: this.deleteId })\n          .then((res) => {\n            this.apiLoading = false;\n            if (this.$tool.checkResponse(res)) {\n              this.successCallback();\n              let { page, limit } = this.listQuery;\n              if (page > 1 && this.total - 1 - (page - 1) * limit <= 0) {\n                this.listQuery.page -= 1;\n              }\n              this.total -= 1;\n              this.getList();\n            }\n          })\n          .catch((err) => {\n            this.failCallback(err);\n          });\n      },\n      prepareSign(){\n        this.apiLoading = true;\n        var _this = this;\n        this.$api(\"blind.box.prepare\", {\n          id: this.blindBoxId,\n          owner: this.web3.coinbase,\n        }).then(async function(res){\n          _this.apiLoading = false;\n          if(_this.$tool.checkResponse(res)){\n            var order = res.data;\n            var message = order.message;\n            message = message.replace(\"0x\", \"\");\n            var result = await web3.sign(message, _this.web3.coinbase);\n            if(result.error){\n              _this.error = result.error;\n            }\n            order.signature = result;\n            _this.signData(order);\n          }\n        });\n      },\n      signData (order) {\n        this.apiLoading = true;\n        this.$api(\"blind.box.sign\", order).then((res) => {\n          this.apiLoading = false;\n          if (this.$tool.checkResponse(res)) {\n            this.successCallback();\n            this.getList();\n          }\n        }).catch((err) => {\n          this.failCallback(err);\n        });\n      },\n      successCallback () {\n        this.$notify.success({\n          title: this.$t(\"blind.success\"),\n          message: this.$t(\"blind.messageSuccess\"),\n        });\n        this.handlerCancel();\n      },\n      failCallback (err, msg) {\n        this.apiLoading = false;\n        this.$notify.error({\n          title: this.$t(\"blind.fail\"),\n          message: err\n            ? (!msg ? this.$t(\"response.\" + err.data ? err.data.errno : \"\") : msg)\n            : this.$t(\"blind.messageFail\"),\n        });\n        if (this.dialogStatus == \"del\" || this.dialogStatus == \"sign\") {\n          this.handlerCancel();\n        }\n      },\n      callbackCloseDialog () {\n        this.resetForm();\n        this.$nextTick(function () {\n          this.$refs[\"formData\"] ? this.$refs[\"formData\"].clearValidate() : \"\";\n        });\n\n        this.dialogStatus = \"\";\n        this.error = \"\";\n      },\n      uploadChange (file, name) {\n        var event = event || window.event;\n        var files = event.target.files[0];\n        var reader = new FileReader();\n        var _this = this;\n        switch (name) {\n          case \"cover\":\n            this.filelist = [];\n            this.fileImage = file.raw;\n            reader.onload = function (e) {\n              _this.formData.imgUrl = e.target.result;\n            };\n            break;\n          case \"open\":\n            this.anim1List = [];\n            this.anim1Image = file.raw;\n            reader.onload = function (e) {\n              _this.formData.anim1 = e.target.result;\n            };\n            break;\n          case \"opened\":\n            this.anim2List = [];\n            this.anim2Image = file.raw;\n            reader.onload = function (e) {\n              _this.formData.anim2 = e.target.result;\n            };\n            break;\n        }\n        reader.readAsDataURL(files);\n      },\n      resetForm () {\n        this.formData = {\n          address: \"\",\n          name: \"\",\n          describe: \"\",\n          times: [],\n          isRepetition: false,\n          amount: \"\",\n          nftAmount: \"\",\n          price: \"\",\n          paytokenId: \"\",\n          imgId: \"\",\n          imgUrl: \"\",\n          anim1: \"\",\n          anim2: \"\",\n        };\n        this.fileImage = \"\";\n        this.anim1Image = \"\";\n        this.anim2Image = \"\";\n        this.error = \"\";\n      },\n      handlerBtn (btnType, row = {}) {\n        switch (btnType) {\n          case \"add\":\n            this.$nextTick(function () {\n              this.$refs[\"formData\"]\n                ? this.$refs[\"formData\"].clearValidate()\n                : \"\";\n            });\n            break;\n          case \"edit\":\n            this.fileImage = \"\";\n            this.anim1Image = \"\";\n            this.anim2Image = \"\";\n            this.formData = Object.assign({}, row);\n            let startTime = !this.formData.startTime\n              ? \"\"\n              : new Date(this.formData.startTime * 1000);\n            let endTime = !this.formData.endTime\n              ? \"\"\n              : new Date(this.formData.endTime * 1000);\n            this.$set(this.formData, \"times\", [startTime, endTime]);\n            this.$nextTick(function () {\n              this.$refs[\"formData\"]\n                ? this.$refs[\"formData\"].clearValidate()\n                : \"\";\n            });\n            break;\n          case \"del\":\n            this.deleteId = row.id;\n            break;\n          case \"sign\":\n            this.blindBoxId = row.id;\n            break;\n          case \"set\":\n            this.box = row;\n            break;\n        }\n        this.dialogFormVisible = true;\n        this.dialogStatus = btnType;\n      },\n      async handlerConfirm () {\n        if (this.apiLoading) return;\n\n        switch (this.dialogStatus) {\n          case \"add\":\n            if (!this.checkForm()) return;\n            var data = {};\n            if (this.fileImage) {\n              var result = await this.uploadStorage(this.fileImage);\n              data.cover = result;\n            }\n            if (this.anim1Image) {\n              var result = await this.uploadStorage(this.anim1Image);\n              data.anim1 = result;\n            }\n            if (this.anim2Image) {\n              var result = await this.uploadStorage(this.anim2Image);\n              data.anim2 = result;\n            }\n            this.addBox(data);\n            break;\n          case \"edit\":\n            if (!this.checkForm()) return;\n            var data = {};\n            if (this.fileImage) {\n              var result = await this.uploadStorage(this.fileImage);\n              data.cover = result;\n            }\n            if (this.anim1Image) {\n              var result = await this.uploadStorage(this.anim1Image);\n              data.anim1 = result;\n            }\n            if (this.anim2Image) {\n              var result = await this.uploadStorage(this.anim2Image);\n              data.anim2 = result;\n            }\n            this.editBox(data);\n            break;\n          case \"del\":\n            this.delBox();\n            break;\n          case \"sign\":\n            this.signData();\n            break;\n          case \"set\":\n            this.$nextTick(() => {\n              if (this.$refs.comSet) {\n                this.$refs.comSet.addBox();\n              }\n            });\n            break;\n        }\n      },\n      handlerCancel () {\n        this.dialogFormVisible = false;\n      },\n      async uploadStorage (file) {\n        return new Promise((resolve, reject) => {\n          const formData = new FormData();\n          formData.append(\"file\", file);\n          var that = this;\n          this.$api(\"storage.create\", formData)\n            .then((res) => {\n              if (this.$tool.checkResponse(res)) {\n                resolve(res.data);\n              } else {\n                reject(res);\n              }\n            }).catch((err) => {\n              reject(err);\n            });\n        });\n      },\n      handlerFilter () {\n        this.listQuery.page = 1;\n        this.getList();\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  .avatar-uploader .el-upload {\n    border: 1px dashed #d9d9d9;\n    border-radius: 6px;\n    cursor: pointer;\n    position: relative;\n    overflow: hidden;\n  }\n  .avatar-uploader .el-upload:hover {\n    border-color: #20a0ff;\n  }\n  .avatar-uploader-icon {\n    font-size: 28px;\n    color: #8c939d;\n    width: 120px;\n    height: 120px;\n    line-height: 120px;\n    text-align: center;\n  }\n  .avatar {\n    width: 145px;\n    height: 145px;\n    display: block;\n  }\n\n  .property-group {\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 15px;\n    .property {\n      flex: 1;\n    }\n    .left {\n      padding-right: 40px;\n    }\n  }\n  .form-tip {\n    font-weight: bold;\n    padding: 0 0 10px 120px;\n  }\n</style>\n"]}]}