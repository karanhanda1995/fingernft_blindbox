{"remainingRequest":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\src\\views\\config\\Network.vue?vue&type=style&index=0&id=2b735c5b&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\src\\views\\config\\Network.vue","mtime":1650964597000},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":1652081880732},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1652081880145},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\postcss-loader\\src\\index.js","mtime":1652081880241},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1652081887366},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652081880827},{"path":"C:\\Users\\97154\\Desktop\\SONGTRADER-V2-FULL\\fingernft_blindbox\\fingernft_blindbox\\vue-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1652081880134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbmZpZy1ncm91cCB7CiAgLmVsLXNlbGVjdCB7CiAgICB3aWR0aDogMTAwJTsKICB9Cn0KCi5lbC1mb3JtLWl0ZW0gOjp2LWRlZXAgLmVsLWZvcm0taXRlbV9fbGFiZWwgewogIGZvbnQtc2l6ZTogMThweDsKICBjb2xvcjogIzMzMzsKfQo="},{"version":3,"sources":["Network.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0OA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Network.vue","sourceRoot":"src/views/config","sourcesContent":["<template>\n  <div class=\"config-group\">\n    <div style=\"text-align: right\">\n      <el-button :loading=\"loading\" v-permission=\"['*']\" type=\"danger\" v-if=\"editKey !== 'edit'\" @click=\"editConfig\">{{ $t('global.edit') }}</el-button>\n      <el-button :loading=\"loading\" v-permission=\"['*']\" type=\"primary\" v-if=\"editKey === 'edit'\" @click=\"updateConfig\">{{ $t('popular.save') }}</el-button>\n      <el-button :loading=\"loading\" v-permission=\"['*']\" v-if=\"editKey === 'edit'\" @click=\"cancelConfig()\">{{ $t('global.cancel') }}</el-button>\n    </div>\n    <el-divider />\n    <el-form ref=\"formRef\" :model=\"editData\" :rules=\"rules\" label-position=\"top\">\n      <el-form-item :label=\"$t('config.network')\" prop=\"network\">\n        <template v-if=\"editKey !== 'edit'\">{{ showData.network }}</template>\n        <template v-else>\n          <el-select v-model=\"editData.network\" @change=\"onSelectChange\">\n            <el-option-group v-for=\"(g, i) in groups\" :key=\"i\" :label=\"g.label\">\n              <el-option v-for=\"(o, j) in g.options\" :key=\"j\" :label=\"o.network\" :value=\"o.network\" />\n            </el-option-group>\n          </el-select>\n        </template>\n      </el-form-item>\n      <el-form-item :label=\"$t('config.network_name')\" prop=\"name\">\n        <template v-if=\"editKey !== 'edit'\">{{ showData.name }}</template>\n        <template v-else-if=\"editData.network !== 'Other'\">\n          {{ editData.name }}\n        </template>\n        <template v-else>\n          <el-input v-model=\"editData.name\" />\n        </template>\n      </el-form-item>\n\n      <el-form-item :label=\"$t('config.network_symbol')\" prop=\"symbol\">\n        <template v-if=\"editKey !== 'edit'\">{{ showData.symbol }}</template>\n        <template v-else-if=\"editData.network !== 'Other'\">\n          {{ editData.symbol }}\n        </template>\n        <template v-else>\n          <el-input v-model=\"editData.symbol\" />\n        </template>\n      </el-form-item>\n\n      <el-form-item :label=\"$t('config.network_rpc')\" prop=\"rpc\">\n        <template v-if=\"editKey !== 'edit'\">{{ showData.rpc }}</template>\n        <template v-else>\n          <el-input v-model=\"editData.rpc\" />\n        </template>\n      </el-form-item>\n\n      <el-form-item :label=\"$t('config.network_chainId')\" prop=\"chainId\">\n        <template v-if=\"editKey !== 'edit'\">{{ showData.chainId }}</template>\n        <template v-else-if=\"editData.network !== 'Other'\">\n          {{ editData.chainId }}\n        </template>\n        <template v-else>\n          <el-input v-model=\"editData.chainId\" />\n        </template>\n      </el-form-item>\n\n      <el-form-item :label=\"$t('config.network_explorer')\" prop=\"explorer\">\n        <template v-if=\"editKey !== 'edit'\">{{ showData.explorer }}</template>\n        <template v-else-if=\"editData.network !== 'Other'\">\n          {{ editData.explorer }}\n        </template>\n        <template v-else>\n          <el-input v-model=\"editData.explorer\" />\n        </template>\n      </el-form-item>\n\n      <el-form-item :label=\"$t('config.network_blockTime')\" prop=\"blockTime\">\n        <template v-if=\"editKey !== 'edit'\">{{ showData.blockTime }}</template>\n        <template v-else-if=\"editData.network !== 'Other'\">\n          {{ editData.blockTime }}\n        </template>\n        <template v-else>\n          <el-input-number v-model=\"editData.blockTime\" :min=\"0\" controls-position=\"right\" style=\"width: 100%;\" />\n        </template>\n      </el-form-item>\n\n      <el-form-item :label=\"$t('config.network_opensea')\" prop=\"opensea\">\n        <template v-if=\"editKey !== 'edit'\">{{ showData.opensea }}</template>\n        <template v-else-if=\"editData.network !== 'Other'\">\n          {{ editData.opensea }}\n        </template>\n        <template v-else>\n          <el-input v-model=\"editData.opensea\" />\n        </template>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\n  import networkOptions from '@/utils/network-options.js'\n  import { mapState } from 'vuex'\n  const dataKey = 'configNetwork'\n  export default {\n    data () {\n      return {\n        dataKey,\n        groups: networkOptions,\n        editData: {},\n        editKey: '',\n        loading: false,\n        rules: {\n          network: {\n            required: true,\n            message: this.$t('config.network') + ' ' + this.$t('global.isRequired'),\n            trigger: 'change'\n          },\n          name: {\n            required: true,\n            message: this.$t('config.network_name') + ' ' + this.$t('global.isRequired'),\n            trigger: 'blur'\n          },\n          symbol: {\n            required: true,\n            message: this.$t('config.network_symbol') + ' ' + this.$t('global.isRequired'),\n            trigger: 'blur'\n          },\n          rpc: {\n            required: true,\n            message: this.$t('config.network_rpc') + ' ' + this.$t('global.isRequired'),\n            trigger: 'blur'\n          },\n          chainId: {\n            required: true,\n            message: this.$t('config.network_chainId') + ' ' + this.$t('global.isRequired'),\n            trigger: 'blur'\n          },\n          explorer: {\n            required: true,\n            message: this.$t('config.network_explorer') + ' ' + this.$t('global.isRequired'),\n            trigger: 'blur'\n          },\n          blockTime: {\n            required: true,\n            message: this.$t('config.network_blockTime') + ' ' + this.$t('global.isRequired'),\n            trigger: 'change'\n          }\n        }\n      }\n    },\n    computed: {\n      ...mapState({\n        config: state => state.app.config\n      }),\n      showData () {\n        if (this.config) {\n          return this.config[dataKey] || {}\n        } else {\n          return {}\n        }\n      }\n    },\n    methods: {\n      editConfig () {\n        this.editKey = 'edit'\n        this.editData = JSON.parse(JSON.stringify(this.showData))\n        if (!this.editData.network) {\n          this.editData.network = 'Other'\n        }\n      },\n      onSelectChange (val) {\n        for (let i = 0;i < this.groups.length;i++) {\n          const group = this.groups[i]\n          for (let j = 0;j < group.options.length;j++) {\n            const option = group.options[j]\n            if (option.network === val) {\n              this.editData = JSON.parse(JSON.stringify(option))\n              return\n            }\n          }\n        }\n      },\n      cancelConfig () {\n        this.$refs.formRef.clearValidate()\n        this.editKey = ''\n      },\n      async updateConfig () {\n        let validRet = false\n        if (this.editData.network === 'Other') {\n          this.$refs.formRef.validate(ret => {\n            validRet = ret\n          })\n        } else {\n          this.$refs.formRef.validateField('rpc', ret => {\n            validRet = !ret\n          })\n        }\n        if (!validRet) return\n        const confirmRet = await this.$confirm(this.$t('global.updateTip'), this.$t('global.tip'), {\n          confirmButtonText: this.$t('global.confirm'),\n          cancelButtonText: this.$t('global.cancel'),\n          type: \"warning\",\n        }).catch(() => { return false })\n        if (!confirmRet) return\n\n        const value = JSON.stringify(this.editData)\n        var data = {\n          key: dataKey,\n          value,\n        };\n        this.loading = true\n        this.$api(\"config.update\", data)\n          .then((res) => {\n            this.loading = false\n            if (this.$tool.checkResponse(res)) {\n              this.$notify.success({\n                title: this.$t('global.success'),\n                message: this.$t('global.updateSuccess'),\n              });\n              this.cancelConfig();\n              this.$store.commit('UPDATE_CONFIG_ITEM', {\n                key: dataKey,\n                value: this.editData\n              })\n            } else {\n              this.$notify.error({\n                title: this.$t('global.fail'),\n                message: res.errmsg,\n              });\n            }\n          })\n          .catch((res) => {\n            this.loading = false\n            this.$notify.error({\n              title: this.$t('global.fail'),\n              message: this.$t('response.' + res.data.errno),\n            });\n          });\n      },\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .config-group {\n    .el-select {\n      width: 100%;\n    }\n  }\n\n  .el-form-item ::v-deep .el-form-item__label {\n    font-size: 18px;\n    color: #333;\n  }\n</style>\n"]}]}